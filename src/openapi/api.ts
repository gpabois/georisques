/* tslint:disable */
/* eslint-disable */
/**
 * API de Géorisques
 * Description de l\'API de Géorisques
 *
 * The version of the OpenAPI document: 1.8.2a
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Azi
 */
export interface Azi {
    /**
     * Identifiant unique INSEE de la commune
     * @type {string}
     * @memberof Azi
     */
    'code_insee'?: string;
    /**
     * Identifiant unique de l\'AZI
     * @type {string}
     * @memberof Azi
     */
    'code_national_azi'?: string;
    /**
     * Date de début de l\'étude
     * @type {string}
     * @memberof Azi
     */
    'date_debut_etude'?: string;
    /**
     * Date de début d\'information
     * @type {string}
     * @memberof Azi
     */
    'date_debut_information'?: string;
    /**
     * Date de début de programmation
     * @type {string}
     * @memberof Azi
     */
    'date_debut_programmation'?: string;
    /**
     * Date de diffusion
     * @type {string}
     * @memberof Azi
     */
    'date_diffusion'?: string;
    /**
     * Date de fin de l\'étude
     * @type {string}
     * @memberof Azi
     */
    'date_fin_etude'?: string;
    /**
     * Date de fin d\'information
     * @type {string}
     * @memberof Azi
     */
    'date_fin_information'?: string;
    /**
     * Date de fin de programmation
     * @type {string}
     * @memberof Azi
     */
    'date_fin_programmation'?: string;
    /**
     * Date de publication web
     * @type {string}
     * @memberof Azi
     */
    'date_publication_web'?: string;
    /**
     * Date de réalisation
     * @type {string}
     * @memberof Azi
     */
    'date_realisation'?: string;
    /**
     * Libellé de l\'AZI
     * @type {string}
     * @memberof Azi
     */
    'libelle_azi'?: string;
    /**
     * Libellé bassin de risque
     * @type {string}
     * @memberof Azi
     */
    'libelle_bassin_risques'?: string;
    /**
     * Libellé commentaires
     * @type {string}
     * @memberof Azi
     */
    'libelle_commentaire'?: string;
    /**
     * Libellé de la commune
     * @type {string}
     * @memberof Azi
     */
    'libelle_commune'?: string;
    /**
     * Détail du risque gaspar
     * @type {Array<RisqueGaspar>}
     * @memberof Azi
     */
    'liste_libelle_risque'?: Array<RisqueGaspar>;
}
/**
 * 
 * @export
 * @interface CatNat
 */
export interface CatNat {
    /**
     * Identifiant unique INSEE de la commune
     * @type {string}
     * @memberof CatNat
     */
    'code_insee'?: string;
    /**
     * Identifiant unique d\'un arrêté de catastrophe naturelle
     * @type {string}
     * @memberof CatNat
     */
    'code_national_catnat'?: string;
    /**
     * Date début de l\'évènement
     * @type {string}
     * @memberof CatNat
     */
    'date_debut_evt'?: string;
    /**
     * Date fin de l\'évènement
     * @type {string}
     * @memberof CatNat
     */
    'date_fin_evt'?: string;
    /**
     * Date de publication de l\'arrêté de catastrophe naturelle
     * @type {string}
     * @memberof CatNat
     */
    'date_publication_arrete'?: string;
    /**
     * Date de publication au Journal officiel
     * @type {string}
     * @memberof CatNat
     */
    'date_publication_jo'?: string;
    /**
     * Libellé de la commune
     * @type {string}
     * @memberof CatNat
     */
    'libelle_commune'?: string;
    /**
     * Libellé du risque au Journal officiel
     * @type {string}
     * @memberof CatNat
     */
    'libelle_risque_jo'?: string;
}
/**
 * 
 * @export
 * @interface Cavites
 */
export interface Cavites {
    /**
     * Identifiant unique INSEE de la commune
     * @type {string}
     * @memberof Cavites
     */
    'code_insee'?: string;
    /**
     * 
     * @type {Departement}
     * @memberof Cavites
     */
    'departement'?: Departement;
    /**
     * Identifiant unique d\'une cavité souterraine
     * @type {string}
     * @memberof Cavites
     */
    'identifiant'?: string;
    /**
     * Latitude de la commune
     * @type {number}
     * @memberof Cavites
     */
    'latitude'?: number;
    /**
     * Longitude de la commune
     * @type {number}
     * @memberof Cavites
     */
    'longitude'?: number;
    /**
     * Nom de cavité souterraine
     * @type {string}
     * @memberof Cavites
     */
    'nom'?: string;
    /**
     * 
     * @type {Region}
     * @memberof Cavites
     */
    'region'?: Region;
    /**
     * ${api.georisques.cavites.reperageGeographique.description}
     * @type {string}
     * @memberof Cavites
     */
    'reperage_geo'?: string;
    /**
     * Type de cavité souterraine
     * @type {string}
     * @memberof Cavites
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface Crs
 */
export interface Crs {
    /**
     * 
     * @type {object}
     * @memberof Crs
     */
    'properties'?: object;
    /**
     * 
     * @type {string}
     * @memberof Crs
     */
    'type'?: CrsTypeEnum;
}

export const CrsTypeEnum = {
    Link: 'link',
    Name: 'name'
} as const;

export type CrsTypeEnum = typeof CrsTypeEnum[keyof typeof CrsTypeEnum];

/**
 * 
 * @export
 * @interface Departement
 */
export interface Departement {
    /**
     * 
     * @type {string}
     * @memberof Departement
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof Departement
     */
    'nom'?: string;
}
/**
 * 
 * @export
 * @interface Dicrim
 */
export interface Dicrim {
    /**
     * Date de publication
     * @type {string}
     * @memberof Dicrim
     */
    'annee_publication'?: string;
    /**
     * Identifiant unique INSEE de la commune
     * @type {string}
     * @memberof Dicrim
     */
    'code_insee'?: string;
    /**
     * Libellé de la commune
     * @type {string}
     * @memberof Dicrim
     */
    'libelle_commune'?: string;
}
/**
 * 
 * @export
 * @interface EtatPPR
 */
export interface EtatPPR {
    /**
     * Code de l\'état d\'un document PPR
     * @type {string}
     * @memberof EtatPPR
     */
    'code_etat'?: string;
    /**
     * Libellé de l\'état d\'un document PPR
     * @type {string}
     * @memberof EtatPPR
     */
    'libelle_etat'?: string;
}
/**
 * 
 * @export
 * @interface FamilleRisques
 */
export interface FamilleRisques {
    /**
     * Classe d\'un risque d\'alea
     * @type {Array<Risque>}
     * @memberof FamilleRisques
     */
    'classes_alea'?: Array<Risque>;
    /**
     * Code d\'un risque PPR
     * @type {string}
     * @memberof FamilleRisques
     */
    'code_risque'?: string;
    /**
     * Libellé d\'un risque PPR
     * @type {string}
     * @memberof FamilleRisques
     */
    'libelle_risque'?: string;
}
/**
 * 
 * @export
 * @interface Feature
 */
export interface Feature extends GeoJsonObject {
    /**
     * 
     * @type {Array<number>}
     * @memberof Feature
     */
    'bbox'?: Array<number>;
    /**
     * 
     * @type {Crs}
     * @memberof Feature
     */
    'crs'?: Crs;
    /**
     * 
     * @type {GeoJsonObject}
     * @memberof Feature
     */
    'geometry'?: GeoJsonObject;
    /**
     * 
     * @type {string}
     * @memberof Feature
     */
    'id'?: string;
    /**
     * 
     * @type {object}
     * @memberof Feature
     */
    'properties'?: object;
}
/**
 * 
 * @export
 * @interface FeatureCollection
 */
export interface FeatureCollection extends GeoJsonObject {
    /**
     * 
     * @type {Array<number>}
     * @memberof FeatureCollection
     */
    'bbox'?: Array<number>;
    /**
     * 
     * @type {Crs}
     * @memberof FeatureCollection
     */
    'crs'?: Crs;
    /**
     * 
     * @type {Array<Feature>}
     * @memberof FeatureCollection
     */
    'features'?: Array<Feature>;
}
/**
 * 
 * @export
 * @interface GeoJsonObject
 */
export interface GeoJsonObject {
    /**
     * 
     * @type {Array<number>}
     * @memberof GeoJsonObject
     */
    'bbox'?: Array<number>;
    /**
     * 
     * @type {Crs}
     * @memberof GeoJsonObject
     */
    'crs'?: Crs;
}
/**
 * 
 * @export
 * @interface GeometryCollection
 */
export interface GeometryCollection extends GeoJsonObject {
    /**
     * 
     * @type {Array<number>}
     * @memberof GeometryCollection
     */
    'bbox'?: Array<number>;
    /**
     * 
     * @type {Crs}
     * @memberof GeometryCollection
     */
    'crs'?: Crs;
    /**
     * 
     * @type {Array<GeoJsonObject>}
     * @memberof GeometryCollection
     */
    'geometries'?: Array<GeoJsonObject>;
}
/**
 * 
 * @export
 * @interface Inspection
 */
export interface Inspection {
    /**
     * Date de l\'inspection pour l\'installation classee en question
     * @type {string}
     * @memberof Inspection
     */
    'dateInspection'?: string;
    /**
     * 
     * @type {MetadataFichier}
     * @memberof Inspection
     */
    'fichierInspection'?: MetadataFichier;
}
/**
 * 
 * @export
 * @interface InstallationClassee
 */
export interface InstallationClassee {
    /**
     * Adresse - Ligne 1
     * @type {string}
     * @memberof InstallationClassee
     */
    'adresse1'?: string;
    /**
     * Adresse - Ligne 2
     * @type {string}
     * @memberof InstallationClassee
     */
    'adresse2'?: string;
    /**
     * Adresse - Ligne 3
     * @type {string}
     * @memberof InstallationClassee
     */
    'adresse3'?: string;
    /**
     * Famille ou sous famille de la nomenclature installation classee
     * @type {boolean}
     * @memberof InstallationClassee
     */
    'bovins'?: boolean;
    /**
     * Famille ou sous famille de la nomenclature installation classee
     * @type {boolean}
     * @memberof InstallationClassee
     */
    'carriere'?: boolean;
    /**
     * Code unique GUNenv, clef metier
     * @type {string}
     * @memberof InstallationClassee
     */
    'codeAIOT'?: string;
    /**
     * Code INSEE de l\'installation classee
     * @type {string}
     * @memberof InstallationClassee
     */
    'codeInsee'?: string;
    /**
     * Deux premiers caracteres du code NAF de l\'installation classee
     * @type {string}
     * @memberof InstallationClassee
     */
    'codeNaf'?: string;
    /**
     * Code postal de l\'installation classee
     * @type {string}
     * @memberof InstallationClassee
     */
    'codePostal'?: string;
    /**
     * Commune de l\'installation classee
     * @type {string}
     * @memberof InstallationClassee
     */
    'commune'?: string;
    /**
     * Valeur de la coordonnee X
     * @type {number}
     * @memberof InstallationClassee
     */
    'coordonneeXAIOT'?: number;
    /**
     * Valeur de la coordonnee Y
     * @type {number}
     * @memberof InstallationClassee
     */
    'coordonneeYAIOT'?: number;
    /**
     * Date de dernière mise à jour des données. L\'API renvoie toutes les données ayant été mises à jour à partir de date_maj
     * @type {string}
     * @memberof InstallationClassee
     */
    'date_maj'?: string;
    /**
     * Liste des documents hors inpection publies sur Georisques
     * @type {Array<MetadataFichier>}
     * @memberof InstallationClassee
     */
    'documentsHorsInspection'?: Array<MetadataFichier>;
    /**
     * Famille ou sous famille de la nomenclature installation classee
     * @type {boolean}
     * @memberof InstallationClassee
     */
    'eolienne'?: boolean;
    /**
     * Etat de l\'activite de l\'installation classee
     * @type {string}
     * @memberof InstallationClassee
     */
    'etatActivite'?: string;
    /**
     * Indicateur IED
     * @type {boolean}
     * @memberof InstallationClassee
     */
    'ied'?: boolean;
    /**
     * Famille ou sous famille de la nomenclature installation classee
     * @type {boolean}
     * @memberof InstallationClassee
     */
    'industrie'?: boolean;
    /**
     * Liste des inspections
     * @type {Array<Inspection>}
     * @memberof InstallationClassee
     */
    'inspections'?: Array<Inspection>;
    /**
     * Valeur de la coordonnee latitude
     * @type {number}
     * @memberof InstallationClassee
     */
    'latitude'?: number;
    /**
     * Valeur de la coordonnee longitude
     * @type {number}
     * @memberof InstallationClassee
     */
    'longitude'?: number;
    /**
     * Famille ou sous famille de la nomenclature installation classee
     * @type {boolean}
     * @memberof InstallationClassee
     */
    'porcs'?: boolean;
    /**
     * Indicateur de priorite nationale
     * @type {boolean}
     * @memberof InstallationClassee
     */
    'prioriteNationale'?: boolean;
    /**
     * Raison sociale de l\'installation classee si personne morale ou nom et prenom si personne physique
     * @type {string}
     * @memberof InstallationClassee
     */
    'raisonSociale'?: string;
    /**
     * Regime en vigeur de l\'installation classee
     * @type {string}
     * @memberof InstallationClassee
     */
    'regime'?: string;
    /**
     * Liste des rubriques repondant aux criteres
     * @type {Array<RubriqueIC>}
     * @memberof InstallationClassee
     */
    'rubriques'?: Array<RubriqueIC>;
    /**
     * Libelle court du service d\'inspection
     * @type {string}
     * @memberof InstallationClassee
     */
    'serviceAIOT'?: string;
    /**
     * Systeme d\'identification du repertoire des installations classees sur 14 chiffres
     * @type {string}
     * @memberof InstallationClassee
     */
    'siret'?: string;
    /**
     * Presence du champ statut SEVESO
     * @type {string}
     * @memberof InstallationClassee
     */
    'statutSeveso'?: string;
    /**
     * Systeme de coordonnees geographiques (projection) de l\'installation classee
     * @type {string}
     * @memberof InstallationClassee
     */
    'systemeCoordonneesAIOT'?: string;
    /**
     * Famille ou sous famille de la nomenclature installation classee
     * @type {boolean}
     * @memberof InstallationClassee
     */
    'volailles'?: boolean;
}
/**
 * 
 * @export
 * @interface LineString
 */
export interface LineString extends GeoJsonObject {
    /**
     * 
     * @type {Array<number>}
     * @memberof LineString
     */
    'bbox'?: Array<number>;
    /**
     * 
     * @type {Array<LngLatAlt>}
     * @memberof LineString
     */
    'coordinates'?: Array<LngLatAlt>;
    /**
     * 
     * @type {Crs}
     * @memberof LineString
     */
    'crs'?: Crs;
}
/**
 * 
 * @export
 * @interface LngLatAlt
 */
export interface LngLatAlt {
    /**
     * 
     * @type {Array<number>}
     * @memberof LngLatAlt
     */
    'additionalElements'?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof LngLatAlt
     */
    'altitude'?: number;
    /**
     * 
     * @type {number}
     * @memberof LngLatAlt
     */
    'latitude'?: number;
    /**
     * 
     * @type {number}
     * @memberof LngLatAlt
     */
    'longitude'?: number;
}
/**
 * 
 * @export
 * @interface MetadataFichier
 */
export interface MetadataFichier {
    /**
     * Date du depot du fichier dans GUNenv
     * @type {string}
     * @memberof MetadataFichier
     */
    'dateFichier'?: string;
    /**
     * Identifiant technique du fichier
     * @type {string}
     * @memberof MetadataFichier
     */
    'identifiantFichier'?: string;
    /**
     * Nom du fichier
     * @type {string}
     * @memberof MetadataFichier
     */
    'nomFichier'?: string;
    /**
     * Libelle du type de fichier
     * @type {string}
     * @memberof MetadataFichier
     */
    'typeFichier'?: string;
    /**
     * URL du fichier tel que diffuse dans Georisques
     * @type {string}
     * @memberof MetadataFichier
     */
    'urlFichier'?: string;
}
/**
 * 
 * @export
 * @interface MultiLineString
 */
export interface MultiLineString extends GeoJsonObject {
    /**
     * 
     * @type {Array<number>}
     * @memberof MultiLineString
     */
    'bbox'?: Array<number>;
    /**
     * 
     * @type {Array<Array<LngLatAlt>>}
     * @memberof MultiLineString
     */
    'coordinates'?: Array<Array<LngLatAlt>>;
    /**
     * 
     * @type {Crs}
     * @memberof MultiLineString
     */
    'crs'?: Crs;
}
/**
 * 
 * @export
 * @interface MultiPoint
 */
export interface MultiPoint extends GeoJsonObject {
    /**
     * 
     * @type {Array<number>}
     * @memberof MultiPoint
     */
    'bbox'?: Array<number>;
    /**
     * 
     * @type {Array<LngLatAlt>}
     * @memberof MultiPoint
     */
    'coordinates'?: Array<LngLatAlt>;
    /**
     * 
     * @type {Crs}
     * @memberof MultiPoint
     */
    'crs'?: Crs;
}
/**
 * 
 * @export
 * @interface MultiPolygon
 */
export interface MultiPolygon extends GeoJsonObject {
    /**
     * 
     * @type {Array<number>}
     * @memberof MultiPolygon
     */
    'bbox'?: Array<number>;
    /**
     * 
     * @type {Array<Array<Array<LngLatAlt>>>}
     * @memberof MultiPolygon
     */
    'coordinates'?: Array<Array<Array<LngLatAlt>>>;
    /**
     * 
     * @type {Crs}
     * @memberof MultiPolygon
     */
    'crs'?: Crs;
}
/**
 * 
 * @export
 * @interface Mvt
 */
export interface Mvt {
    /**
     * Identifiant unique INSEE de la commune
     * @type {string}
     * @memberof Mvt
     */
    'code_insee'?: string;
    /**
     * Commentaire su le lieu d\'un mouvement de terrain
     * @type {string}
     * @memberof Mvt
     */
    'commentaire_lieu'?: string;
    /**
     * Commentaire d\'un mouvement de terrain
     * @type {string}
     * @memberof Mvt
     */
    'commentaire_mvt'?: string;
    /**
     * Date de début d\'un mouvement de terrain
     * @type {string}
     * @memberof Mvt
     */
    'date_debut'?: string;
    /**
     * Date de mise à jour d\'un mouvement de terrain
     * @type {string}
     * @memberof Mvt
     */
    'date_maj'?: string;
    /**
     * 
     * @type {Departement}
     * @memberof Mvt
     */
    'departement'?: Departement;
    /**
     * Type de fiabilité
     * @type {string}
     * @memberof Mvt
     */
    'fiabilite'?: string;
    /**
     * Identifiant unique d\'un mouvement de terrain
     * @type {string}
     * @memberof Mvt
     */
    'identifiant'?: string;
    /**
     * Latitude de la commune
     * @type {number}
     * @memberof Mvt
     */
    'latitude'?: number;
    /**
     * Lieu d\'un mouvement de terrain
     * @type {string}
     * @memberof Mvt
     */
    'lieu'?: string;
    /**
     * Longitude de la commune
     * @type {number}
     * @memberof Mvt
     */
    'longitude'?: number;
    /**
     * Précision de la date d\'un mouvement de terrain
     * @type {string}
     * @memberof Mvt
     */
    'precision_date'?: string;
    /**
     * Précision du lieu d\'un mouvement de terrain
     * @type {string}
     * @memberof Mvt
     */
    'precision_lieu'?: string;
    /**
     * 
     * @type {Region}
     * @memberof Mvt
     */
    'region'?: Region;
    /**
     * Type de mouvement de terrain
     * @type {string}
     * @memberof Mvt
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface PaginatedResponseAzi
 */
export interface PaginatedResponseAzi {
    /**
     * Le tableau contenant la réponse du endpoint
     * @type {Array<Azi>}
     * @memberof PaginatedResponseAzi
     */
    'data'?: Array<Azi>;
    /**
     * Le message d\'erreur si applicable
     * @type {string}
     * @memberof PaginatedResponseAzi
     */
    'message'?: string;
    /**
     * Le lien vers la page de résultat suivante
     * @type {string}
     * @memberof PaginatedResponseAzi
     */
    'next'?: string;
    /**
     * Le numéro de page actuelle
     * @type {number}
     * @memberof PaginatedResponseAzi
     */
    'page'?: number;
    /**
     * Le lien vers la page de résultat précédente
     * @type {string}
     * @memberof PaginatedResponseAzi
     */
    'previous'?: string;
    /**
     * Le code HTTP de la réponse
     * @type {number}
     * @memberof PaginatedResponseAzi
     */
    'response_code'?: number;
    /**
     * Le nombre total de résultats
     * @type {number}
     * @memberof PaginatedResponseAzi
     */
    'results'?: number;
    /**
     * Le nombre total de pages
     * @type {number}
     * @memberof PaginatedResponseAzi
     */
    'total_pages'?: number;
}
/**
 * 
 * @export
 * @interface PaginatedResponseCatNat
 */
export interface PaginatedResponseCatNat {
    /**
     * Le tableau contenant la réponse du endpoint
     * @type {Array<CatNat>}
     * @memberof PaginatedResponseCatNat
     */
    'data'?: Array<CatNat>;
    /**
     * Le message d\'erreur si applicable
     * @type {string}
     * @memberof PaginatedResponseCatNat
     */
    'message'?: string;
    /**
     * Le lien vers la page de résultat suivante
     * @type {string}
     * @memberof PaginatedResponseCatNat
     */
    'next'?: string;
    /**
     * Le numéro de page actuelle
     * @type {number}
     * @memberof PaginatedResponseCatNat
     */
    'page'?: number;
    /**
     * Le lien vers la page de résultat précédente
     * @type {string}
     * @memberof PaginatedResponseCatNat
     */
    'previous'?: string;
    /**
     * Le code HTTP de la réponse
     * @type {number}
     * @memberof PaginatedResponseCatNat
     */
    'response_code'?: number;
    /**
     * Le nombre total de résultats
     * @type {number}
     * @memberof PaginatedResponseCatNat
     */
    'results'?: number;
    /**
     * Le nombre total de pages
     * @type {number}
     * @memberof PaginatedResponseCatNat
     */
    'total_pages'?: number;
}
/**
 * 
 * @export
 * @interface PaginatedResponseCavites
 */
export interface PaginatedResponseCavites {
    /**
     * Le tableau contenant la réponse du endpoint
     * @type {Array<Cavites>}
     * @memberof PaginatedResponseCavites
     */
    'data'?: Array<Cavites>;
    /**
     * Le message d\'erreur si applicable
     * @type {string}
     * @memberof PaginatedResponseCavites
     */
    'message'?: string;
    /**
     * Le lien vers la page de résultat suivante
     * @type {string}
     * @memberof PaginatedResponseCavites
     */
    'next'?: string;
    /**
     * Le numéro de page actuelle
     * @type {number}
     * @memberof PaginatedResponseCavites
     */
    'page'?: number;
    /**
     * Le lien vers la page de résultat précédente
     * @type {string}
     * @memberof PaginatedResponseCavites
     */
    'previous'?: string;
    /**
     * Le code HTTP de la réponse
     * @type {number}
     * @memberof PaginatedResponseCavites
     */
    'response_code'?: number;
    /**
     * Le nombre total de résultats
     * @type {number}
     * @memberof PaginatedResponseCavites
     */
    'results'?: number;
    /**
     * Le nombre total de pages
     * @type {number}
     * @memberof PaginatedResponseCavites
     */
    'total_pages'?: number;
}
/**
 * 
 * @export
 * @interface PaginatedResponseDicrim
 */
export interface PaginatedResponseDicrim {
    /**
     * Le tableau contenant la réponse du endpoint
     * @type {Array<Dicrim>}
     * @memberof PaginatedResponseDicrim
     */
    'data'?: Array<Dicrim>;
    /**
     * Le message d\'erreur si applicable
     * @type {string}
     * @memberof PaginatedResponseDicrim
     */
    'message'?: string;
    /**
     * Le lien vers la page de résultat suivante
     * @type {string}
     * @memberof PaginatedResponseDicrim
     */
    'next'?: string;
    /**
     * Le numéro de page actuelle
     * @type {number}
     * @memberof PaginatedResponseDicrim
     */
    'page'?: number;
    /**
     * Le lien vers la page de résultat précédente
     * @type {string}
     * @memberof PaginatedResponseDicrim
     */
    'previous'?: string;
    /**
     * Le code HTTP de la réponse
     * @type {number}
     * @memberof PaginatedResponseDicrim
     */
    'response_code'?: number;
    /**
     * Le nombre total de résultats
     * @type {number}
     * @memberof PaginatedResponseDicrim
     */
    'results'?: number;
    /**
     * Le nombre total de pages
     * @type {number}
     * @memberof PaginatedResponseDicrim
     */
    'total_pages'?: number;
}
/**
 * 
 * @export
 * @interface PaginatedResponseEtatPPR
 */
export interface PaginatedResponseEtatPPR {
    /**
     * Le tableau contenant la réponse du endpoint
     * @type {Array<EtatPPR>}
     * @memberof PaginatedResponseEtatPPR
     */
    'data'?: Array<EtatPPR>;
    /**
     * Le message d\'erreur si applicable
     * @type {string}
     * @memberof PaginatedResponseEtatPPR
     */
    'message'?: string;
    /**
     * Le lien vers la page de résultat suivante
     * @type {string}
     * @memberof PaginatedResponseEtatPPR
     */
    'next'?: string;
    /**
     * Le numéro de page actuelle
     * @type {number}
     * @memberof PaginatedResponseEtatPPR
     */
    'page'?: number;
    /**
     * Le lien vers la page de résultat précédente
     * @type {string}
     * @memberof PaginatedResponseEtatPPR
     */
    'previous'?: string;
    /**
     * Le code HTTP de la réponse
     * @type {number}
     * @memberof PaginatedResponseEtatPPR
     */
    'response_code'?: number;
    /**
     * Le nombre total de résultats
     * @type {number}
     * @memberof PaginatedResponseEtatPPR
     */
    'results'?: number;
    /**
     * Le nombre total de pages
     * @type {number}
     * @memberof PaginatedResponseEtatPPR
     */
    'total_pages'?: number;
}
/**
 * 
 * @export
 * @interface PaginatedResponseFamilleRisques
 */
export interface PaginatedResponseFamilleRisques {
    /**
     * Le tableau contenant la réponse du endpoint
     * @type {Array<FamilleRisques>}
     * @memberof PaginatedResponseFamilleRisques
     */
    'data'?: Array<FamilleRisques>;
    /**
     * Le message d\'erreur si applicable
     * @type {string}
     * @memberof PaginatedResponseFamilleRisques
     */
    'message'?: string;
    /**
     * Le lien vers la page de résultat suivante
     * @type {string}
     * @memberof PaginatedResponseFamilleRisques
     */
    'next'?: string;
    /**
     * Le numéro de page actuelle
     * @type {number}
     * @memberof PaginatedResponseFamilleRisques
     */
    'page'?: number;
    /**
     * Le lien vers la page de résultat précédente
     * @type {string}
     * @memberof PaginatedResponseFamilleRisques
     */
    'previous'?: string;
    /**
     * Le code HTTP de la réponse
     * @type {number}
     * @memberof PaginatedResponseFamilleRisques
     */
    'response_code'?: number;
    /**
     * Le nombre total de résultats
     * @type {number}
     * @memberof PaginatedResponseFamilleRisques
     */
    'results'?: number;
    /**
     * Le nombre total de pages
     * @type {number}
     * @memberof PaginatedResponseFamilleRisques
     */
    'total_pages'?: number;
}
/**
 * 
 * @export
 * @interface PaginatedResponseInstallationClassee
 */
export interface PaginatedResponseInstallationClassee {
    /**
     * Le tableau contenant la réponse du endpoint
     * @type {Array<InstallationClassee>}
     * @memberof PaginatedResponseInstallationClassee
     */
    'data'?: Array<InstallationClassee>;
    /**
     * Le message d\'erreur si applicable
     * @type {string}
     * @memberof PaginatedResponseInstallationClassee
     */
    'message'?: string;
    /**
     * Le lien vers la page de résultat suivante
     * @type {string}
     * @memberof PaginatedResponseInstallationClassee
     */
    'next'?: string;
    /**
     * Le numéro de page actuelle
     * @type {number}
     * @memberof PaginatedResponseInstallationClassee
     */
    'page'?: number;
    /**
     * Le lien vers la page de résultat précédente
     * @type {string}
     * @memberof PaginatedResponseInstallationClassee
     */
    'previous'?: string;
    /**
     * Le code HTTP de la réponse
     * @type {number}
     * @memberof PaginatedResponseInstallationClassee
     */
    'response_code'?: number;
    /**
     * Le nombre total de résultats
     * @type {number}
     * @memberof PaginatedResponseInstallationClassee
     */
    'results'?: number;
    /**
     * Le nombre total de pages
     * @type {number}
     * @memberof PaginatedResponseInstallationClassee
     */
    'total_pages'?: number;
}
/**
 * 
 * @export
 * @interface PaginatedResponseMvt
 */
export interface PaginatedResponseMvt {
    /**
     * Le tableau contenant la réponse du endpoint
     * @type {Array<Mvt>}
     * @memberof PaginatedResponseMvt
     */
    'data'?: Array<Mvt>;
    /**
     * Le message d\'erreur si applicable
     * @type {string}
     * @memberof PaginatedResponseMvt
     */
    'message'?: string;
    /**
     * Le lien vers la page de résultat suivante
     * @type {string}
     * @memberof PaginatedResponseMvt
     */
    'next'?: string;
    /**
     * Le numéro de page actuelle
     * @type {number}
     * @memberof PaginatedResponseMvt
     */
    'page'?: number;
    /**
     * Le lien vers la page de résultat précédente
     * @type {string}
     * @memberof PaginatedResponseMvt
     */
    'previous'?: string;
    /**
     * Le code HTTP de la réponse
     * @type {number}
     * @memberof PaginatedResponseMvt
     */
    'response_code'?: number;
    /**
     * Le nombre total de résultats
     * @type {number}
     * @memberof PaginatedResponseMvt
     */
    'results'?: number;
    /**
     * Le nombre total de pages
     * @type {number}
     * @memberof PaginatedResponseMvt
     */
    'total_pages'?: number;
}
/**
 * 
 * @export
 * @interface PaginatedResponsePPR
 */
export interface PaginatedResponsePPR {
    /**
     * Le tableau contenant la réponse du endpoint
     * @type {Array<object>}
     * @memberof PaginatedResponsePPR
     */
    'data'?: Array<object>;
    /**
     * Le message d\'erreur si applicable
     * @type {string}
     * @memberof PaginatedResponsePPR
     */
    'message'?: string;
    /**
     * Le lien vers la page de résultat suivante
     * @type {string}
     * @memberof PaginatedResponsePPR
     */
    'next'?: string;
    /**
     * Le numéro de page actuelle
     * @type {number}
     * @memberof PaginatedResponsePPR
     */
    'page'?: number;
    /**
     * Le lien vers la page de résultat précédente
     * @type {string}
     * @memberof PaginatedResponsePPR
     */
    'previous'?: string;
    /**
     * Le code HTTP de la réponse
     * @type {number}
     * @memberof PaginatedResponsePPR
     */
    'response_code'?: number;
    /**
     * Le nombre total de résultats
     * @type {number}
     * @memberof PaginatedResponsePPR
     */
    'results'?: number;
    /**
     * Le nombre total de pages
     * @type {number}
     * @memberof PaginatedResponsePPR
     */
    'total_pages'?: number;
}
/**
 * 
 * @export
 * @interface PaginatedResponsePapi
 */
export interface PaginatedResponsePapi {
    /**
     * Le tableau contenant la réponse du endpoint
     * @type {Array<Papi>}
     * @memberof PaginatedResponsePapi
     */
    'data'?: Array<Papi>;
    /**
     * Le message d\'erreur si applicable
     * @type {string}
     * @memberof PaginatedResponsePapi
     */
    'message'?: string;
    /**
     * Le lien vers la page de résultat suivante
     * @type {string}
     * @memberof PaginatedResponsePapi
     */
    'next'?: string;
    /**
     * Le numéro de page actuelle
     * @type {number}
     * @memberof PaginatedResponsePapi
     */
    'page'?: number;
    /**
     * Le lien vers la page de résultat précédente
     * @type {string}
     * @memberof PaginatedResponsePapi
     */
    'previous'?: string;
    /**
     * Le code HTTP de la réponse
     * @type {number}
     * @memberof PaginatedResponsePapi
     */
    'response_code'?: number;
    /**
     * Le nombre total de résultats
     * @type {number}
     * @memberof PaginatedResponsePapi
     */
    'results'?: number;
    /**
     * Le nombre total de pages
     * @type {number}
     * @memberof PaginatedResponsePapi
     */
    'total_pages'?: number;
}
/**
 * 
 * @export
 * @interface PaginatedResponsePcs
 */
export interface PaginatedResponsePcs {
    /**
     * Le tableau contenant la réponse du endpoint
     * @type {Array<Pcs>}
     * @memberof PaginatedResponsePcs
     */
    'data'?: Array<Pcs>;
    /**
     * Le message d\'erreur si applicable
     * @type {string}
     * @memberof PaginatedResponsePcs
     */
    'message'?: string;
    /**
     * Le lien vers la page de résultat suivante
     * @type {string}
     * @memberof PaginatedResponsePcs
     */
    'next'?: string;
    /**
     * Le numéro de page actuelle
     * @type {number}
     * @memberof PaginatedResponsePcs
     */
    'page'?: number;
    /**
     * Le lien vers la page de résultat précédente
     * @type {string}
     * @memberof PaginatedResponsePcs
     */
    'previous'?: string;
    /**
     * Le code HTTP de la réponse
     * @type {number}
     * @memberof PaginatedResponsePcs
     */
    'response_code'?: number;
    /**
     * Le nombre total de résultats
     * @type {number}
     * @memberof PaginatedResponsePcs
     */
    'results'?: number;
    /**
     * Le nombre total de pages
     * @type {number}
     * @memberof PaginatedResponsePcs
     */
    'total_pages'?: number;
}
/**
 * 
 * @export
 * @interface PaginatedResponseRadon
 */
export interface PaginatedResponseRadon {
    /**
     * Le tableau contenant la réponse du endpoint
     * @type {Array<Radon>}
     * @memberof PaginatedResponseRadon
     */
    'data'?: Array<Radon>;
    /**
     * Le message d\'erreur si applicable
     * @type {string}
     * @memberof PaginatedResponseRadon
     */
    'message'?: string;
    /**
     * Le lien vers la page de résultat suivante
     * @type {string}
     * @memberof PaginatedResponseRadon
     */
    'next'?: string;
    /**
     * Le numéro de page actuelle
     * @type {number}
     * @memberof PaginatedResponseRadon
     */
    'page'?: number;
    /**
     * Le lien vers la page de résultat précédente
     * @type {string}
     * @memberof PaginatedResponseRadon
     */
    'previous'?: string;
    /**
     * Le code HTTP de la réponse
     * @type {number}
     * @memberof PaginatedResponseRadon
     */
    'response_code'?: number;
    /**
     * Le nombre total de résultats
     * @type {number}
     * @memberof PaginatedResponseRadon
     */
    'results'?: number;
    /**
     * Le nombre total de pages
     * @type {number}
     * @memberof PaginatedResponseRadon
     */
    'total_pages'?: number;
}
/**
 * 
 * @export
 * @interface PaginatedResponseRisques
 */
export interface PaginatedResponseRisques {
    /**
     * Le tableau contenant la réponse du endpoint
     * @type {Array<Risques>}
     * @memberof PaginatedResponseRisques
     */
    'data'?: Array<Risques>;
    /**
     * Le message d\'erreur si applicable
     * @type {string}
     * @memberof PaginatedResponseRisques
     */
    'message'?: string;
    /**
     * Le lien vers la page de résultat suivante
     * @type {string}
     * @memberof PaginatedResponseRisques
     */
    'next'?: string;
    /**
     * Le numéro de page actuelle
     * @type {number}
     * @memberof PaginatedResponseRisques
     */
    'page'?: number;
    /**
     * Le lien vers la page de résultat précédente
     * @type {string}
     * @memberof PaginatedResponseRisques
     */
    'previous'?: string;
    /**
     * Le code HTTP de la réponse
     * @type {number}
     * @memberof PaginatedResponseRisques
     */
    'response_code'?: number;
    /**
     * Le nombre total de résultats
     * @type {number}
     * @memberof PaginatedResponseRisques
     */
    'results'?: number;
    /**
     * Le nombre total de pages
     * @type {number}
     * @memberof PaginatedResponseRisques
     */
    'total_pages'?: number;
}
/**
 * 
 * @export
 * @interface PaginatedResponseSIS
 */
export interface PaginatedResponseSIS {
    /**
     * Le tableau contenant la réponse du endpoint
     * @type {Array<SIS>}
     * @memberof PaginatedResponseSIS
     */
    'data'?: Array<SIS>;
    /**
     * Le message d\'erreur si applicable
     * @type {string}
     * @memberof PaginatedResponseSIS
     */
    'message'?: string;
    /**
     * Le lien vers la page de résultat suivante
     * @type {string}
     * @memberof PaginatedResponseSIS
     */
    'next'?: string;
    /**
     * Le numéro de page actuelle
     * @type {number}
     * @memberof PaginatedResponseSIS
     */
    'page'?: number;
    /**
     * Le lien vers la page de résultat précédente
     * @type {string}
     * @memberof PaginatedResponseSIS
     */
    'previous'?: string;
    /**
     * Le code HTTP de la réponse
     * @type {number}
     * @memberof PaginatedResponseSIS
     */
    'response_code'?: number;
    /**
     * Le nombre total de résultats
     * @type {number}
     * @memberof PaginatedResponseSIS
     */
    'results'?: number;
    /**
     * Le nombre total de pages
     * @type {number}
     * @memberof PaginatedResponseSIS
     */
    'total_pages'?: number;
}
/**
 * 
 * @export
 * @interface PaginatedResponseTim
 */
export interface PaginatedResponseTim {
    /**
     * Le tableau contenant la réponse du endpoint
     * @type {Array<Tim>}
     * @memberof PaginatedResponseTim
     */
    'data'?: Array<Tim>;
    /**
     * Le message d\'erreur si applicable
     * @type {string}
     * @memberof PaginatedResponseTim
     */
    'message'?: string;
    /**
     * Le lien vers la page de résultat suivante
     * @type {string}
     * @memberof PaginatedResponseTim
     */
    'next'?: string;
    /**
     * Le numéro de page actuelle
     * @type {number}
     * @memberof PaginatedResponseTim
     */
    'page'?: number;
    /**
     * Le lien vers la page de résultat précédente
     * @type {string}
     * @memberof PaginatedResponseTim
     */
    'previous'?: string;
    /**
     * Le code HTTP de la réponse
     * @type {number}
     * @memberof PaginatedResponseTim
     */
    'response_code'?: number;
    /**
     * Le nombre total de résultats
     * @type {number}
     * @memberof PaginatedResponseTim
     */
    'results'?: number;
    /**
     * Le nombre total de pages
     * @type {number}
     * @memberof PaginatedResponseTim
     */
    'total_pages'?: number;
}
/**
 * 
 * @export
 * @interface PaginatedResponseTri
 */
export interface PaginatedResponseTri {
    /**
     * Le tableau contenant la réponse du endpoint
     * @type {Array<Tri>}
     * @memberof PaginatedResponseTri
     */
    'data'?: Array<Tri>;
    /**
     * Le message d\'erreur si applicable
     * @type {string}
     * @memberof PaginatedResponseTri
     */
    'message'?: string;
    /**
     * Le lien vers la page de résultat suivante
     * @type {string}
     * @memberof PaginatedResponseTri
     */
    'next'?: string;
    /**
     * Le numéro de page actuelle
     * @type {number}
     * @memberof PaginatedResponseTri
     */
    'page'?: number;
    /**
     * Le lien vers la page de résultat précédente
     * @type {string}
     * @memberof PaginatedResponseTri
     */
    'previous'?: string;
    /**
     * Le code HTTP de la réponse
     * @type {number}
     * @memberof PaginatedResponseTri
     */
    'response_code'?: number;
    /**
     * Le nombre total de résultats
     * @type {number}
     * @memberof PaginatedResponseTri
     */
    'results'?: number;
    /**
     * Le nombre total de pages
     * @type {number}
     * @memberof PaginatedResponseTri
     */
    'total_pages'?: number;
}
/**
 * 
 * @export
 * @interface PaginatedResponseZonageSismique
 */
export interface PaginatedResponseZonageSismique {
    /**
     * Le tableau contenant la réponse du endpoint
     * @type {Array<ZonageSismique>}
     * @memberof PaginatedResponseZonageSismique
     */
    'data'?: Array<ZonageSismique>;
    /**
     * Le message d\'erreur si applicable
     * @type {string}
     * @memberof PaginatedResponseZonageSismique
     */
    'message'?: string;
    /**
     * Le lien vers la page de résultat suivante
     * @type {string}
     * @memberof PaginatedResponseZonageSismique
     */
    'next'?: string;
    /**
     * Le numéro de page actuelle
     * @type {number}
     * @memberof PaginatedResponseZonageSismique
     */
    'page'?: number;
    /**
     * Le lien vers la page de résultat précédente
     * @type {string}
     * @memberof PaginatedResponseZonageSismique
     */
    'previous'?: string;
    /**
     * Le code HTTP de la réponse
     * @type {number}
     * @memberof PaginatedResponseZonageSismique
     */
    'response_code'?: number;
    /**
     * Le nombre total de résultats
     * @type {number}
     * @memberof PaginatedResponseZonageSismique
     */
    'results'?: number;
    /**
     * Le nombre total de pages
     * @type {number}
     * @memberof PaginatedResponseZonageSismique
     */
    'total_pages'?: number;
}
/**
 * 
 * @export
 * @interface Papi
 */
export interface Papi {
    /**
     * Identifiant unique INSEE de la commune
     * @type {string}
     * @memberof Papi
     */
    'code_insee'?: string;
    /**
     * Identifiant unique du PAPI
     * @type {string}
     * @memberof Papi
     */
    'code_national_papi'?: string;
    /**
     * Date de fin de réalisation du PAPI
     * @type {string}
     * @memberof Papi
     */
    'date_fin_realisation'?: string;
    /**
     * Date de labellisation du PAPI
     * @type {string}
     * @memberof Papi
     */
    'date_labellisation'?: string;
    /**
     * Date de signature du PAPI
     * @type {string}
     * @memberof Papi
     */
    'date_signature'?: string;
    /**
     * Libellé bassin de risque
     * @type {string}
     * @memberof Papi
     */
    'libelle_bassin_risques'?: string;
    /**
     * Libellé commentaires
     * @type {string}
     * @memberof Papi
     */
    'libelle_commentaire'?: string;
    /**
     * Libellé de la commune
     * @type {string}
     * @memberof Papi
     */
    'libelle_commune'?: string;
    /**
     * Libellé du PAPI
     * @type {string}
     * @memberof Papi
     */
    'libelle_papi'?: string;
    /**
     * Détail du risque gaspar
     * @type {Array<RisqueGaspar>}
     * @memberof Papi
     */
    'liste_libelle_risque'?: Array<RisqueGaspar>;
}
/**
 * 
 * @export
 * @interface Pcs
 */
export interface Pcs {
    /**
     * Identifiant unique INSEE de la commune
     * @type {string}
     * @memberof Pcs
     */
    'code_insee'?: string;
    /**
     * Identifiant unique d\'un PCS
     * @type {string}
     * @memberof Pcs
     */
    'code_national_pcs'?: string;
    /**
     * Date de début de l\'étude
     * @type {string}
     * @memberof Pcs
     */
    'date_debut_etude'?: string;
    /**
     * Date de fin de l\'étude
     * @type {string}
     * @memberof Pcs
     */
    'date_fin_etude'?: string;
    /**
     * Date de notification
     * @type {string}
     * @memberof Pcs
     */
    'date_notification'?: string;
    /**
     * Libellé bassin de risque
     * @type {string}
     * @memberof Pcs
     */
    'libelle_bassin_risques'?: string;
    /**
     * Libellé commentaires
     * @type {string}
     * @memberof Pcs
     */
    'libelle_commentaire'?: string;
    /**
     * Libellé de la commune
     * @type {string}
     * @memberof Pcs
     */
    'libelle_commune'?: string;
    /**
     * Libellé du PCS
     * @type {string}
     * @memberof Pcs
     */
    'libelle_pcs'?: string;
    /**
     * Détail du risque gaspar
     * @type {Array<RisqueGaspar>}
     * @memberof Pcs
     */
    'liste_libelle_risque'?: Array<RisqueGaspar>;
}
/**
 * 
 * @export
 * @interface Point
 */
export interface Point extends GeoJsonObject {
    /**
     * 
     * @type {Array<number>}
     * @memberof Point
     */
    'bbox'?: Array<number>;
    /**
     * 
     * @type {LngLatAlt}
     * @memberof Point
     */
    'coordinates'?: LngLatAlt;
    /**
     * 
     * @type {Crs}
     * @memberof Point
     */
    'crs'?: Crs;
}
/**
 * 
 * @export
 * @interface Polygon
 */
export interface Polygon extends GeoJsonObject {
    /**
     * 
     * @type {Array<number>}
     * @memberof Polygon
     */
    'bbox'?: Array<number>;
    /**
     * 
     * @type {Array<Array<LngLatAlt>>}
     * @memberof Polygon
     */
    'coordinates'?: Array<Array<LngLatAlt>>;
    /**
     * 
     * @type {Crs}
     * @memberof Polygon
     */
    'crs'?: Crs;
}
/**
 * 
 * @export
 * @interface Radon
 */
export interface Radon {
    /**
     * Classe potentielle du risque Radon
     * @type {string}
     * @memberof Radon
     */
    'classe_potentiel'?: string;
    /**
     * Code Insee de la commune
     * @type {string}
     * @memberof Radon
     */
    'code_insee'?: string;
    /**
     * Libellé de la commune
     * @type {string}
     * @memberof Radon
     */
    'libelle_commune'?: string;
}
/**
 * 
 * @export
 * @interface Region
 */
export interface Region {
    /**
     * 
     * @type {string}
     * @memberof Region
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof Region
     */
    'nom'?: string;
}
/**
 * 
 * @export
 * @interface Risque
 */
export interface Risque {
    /**
     * 
     * @type {string}
     * @memberof Risque
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof Risque
     */
    'libelle'?: string;
}
/**
 * 
 * @export
 * @interface RisqueGaspar
 */
export interface RisqueGaspar {
    /**
     * Libellé long du risque
     * @type {string}
     * @memberof RisqueGaspar
     */
    'libelle_risque_long'?: string;
    /**
     * Identifiant technique du risque
     * @type {string}
     * @memberof RisqueGaspar
     */
    'num_risque'?: string;
}
/**
 * 
 * @export
 * @interface Risques
 */
export interface Risques {
    /**
     * Libellé de la commune
     * @type {string}
     * @memberof Risques
     */
    'code_insee'?: string;
    /**
     * Détail des risques de la commune
     * @type {string}
     * @memberof Risques
     */
    'libelle_commune'?: string;
    /**
     * Identifiant unique INSEE de la commun
     * @type {Array<RisquesDetail>}
     * @memberof Risques
     */
    'risques_detail'?: Array<RisquesDetail>;
}
/**
 * 
 * @export
 * @interface RisquesDetail
 */
export interface RisquesDetail {
    /**
     * Libellé long du risqu
     * @type {string}
     * @memberof RisquesDetail
     */
    'libelle_risque_long'?: string;
    /**
     * Identifiant technique du risque
     * @type {string}
     * @memberof RisquesDetail
     */
    'num_risque'?: string;
    /**
     * Zone de sismicité
     * @type {string}
     * @memberof RisquesDetail
     */
    'zone_sismicite'?: string;
}
/**
 * 
 * @export
 * @interface RubriqueIC
 */
export interface RubriqueIC {
    /**
     * Alinea de la rubrique concernee
     * @type {string}
     * @memberof RubriqueIC
     */
    'alinea'?: string;
    /**
     * Nature de la rubrique proposee
     * @type {string}
     * @memberof RubriqueIC
     */
    'nature'?: string;
    /**
     * Numero de la rubrique autorisee
     * @type {string}
     * @memberof RubriqueIC
     */
    'numeroRubrique'?: string;
    /**
     * Quantite totale sur le site
     * @type {string}
     * @memberof RubriqueIC
     */
    'quantiteTotale'?: string;
    /**
     * Regime autorise de l\'alinea
     * @type {string}
     * @memberof RubriqueIC
     */
    'regimeAutoriseAlinea'?: string;
    /**
     * Unite de cet alinea de la rubrique
     * @type {string}
     * @memberof RubriqueIC
     */
    'unite'?: string;
}
/**
 * 
 * @export
 * @interface SIS
 */
export interface SIS {
    /**
     * Adresse du SIS
     * @type {string}
     * @memberof SIS
     */
    'adresse'?: string;
    /**
     * Lieu-dit du SIS
     * @type {string}
     * @memberof SIS
     */
    'adresse_lieudit'?: string;
    /**
     * Code Insee de la commune
     * @type {string}
     * @memberof SIS
     */
    'code_insee'?: string;
    /**
     * Lien vers la fiche risque du SIS
     * @type {string}
     * @memberof SIS
     */
    'fiche_risque'?: string;
    /**
     * 
     * @type {GeoJsonObject}
     * @memberof SIS
     */
    'geom'?: GeoJsonObject;
    /**
     * Identifiant unique du SIS
     * @type {string}
     * @memberof SIS
     */
    'id_sis'?: string;
    /**
     * Nom du SIS
     * @type {string}
     * @memberof SIS
     */
    'nom'?: string;
    /**
     * Libellé de la commune
     * @type {string}
     * @memberof SIS
     */
    'nom_commune'?: string;
    /**
     * Superficie du SIS en m2
     * @type {number}
     * @memberof SIS
     */
    'superficie'?: number;
}
/**
 * 
 * @export
 * @interface Tim
 */
export interface Tim {
    /**
     * Identifiant unique INSEE de la commune
     * @type {string}
     * @memberof Tim
     */
    'code_insee'?: string;
    /**
     * Date de transmission
     * @type {string}
     * @memberof Tim
     */
    'date_transmission'?: string;
    /**
     * Libellé de la commune
     * @type {string}
     * @memberof Tim
     */
    'libelle_commune'?: string;
}
/**
 * 
 * @export
 * @interface Tri
 */
export interface Tri {
    /**
     * Identifiant unique INSEE de la commune
     * @type {string}
     * @memberof Tri
     */
    'code_insee'?: string;
    /**
     * ${api.georisques.gaspar.tri.codenatazi.description}
     * @type {string}
     * @memberof Tri
     */
    'code_national_tri'?: string;
    /**
     * Arrêté d\'approbation de la partie locale
     * @type {string}
     * @memberof Tri
     */
    'date_arrete_approbation'?: string;
    /**
     * Arrêté de la cartographie du TRI
     * @type {string}
     * @memberof Tri
     */
    'date_arrete_carte'?: string;
    /**
     * Arrêté TRI national
     * @type {string}
     * @memberof Tri
     */
    'date_arrete_national'?: string;
    /**
     * Arrêté du préfet coordonnateur de bassin
     * @type {string}
     * @memberof Tri
     */
    'date_arrete_pcb'?: string;
    /**
     * Arrêté de la stratégie locale
     * @type {string}
     * @memberof Tri
     */
    'date_arrete_pcb_local'?: string;
    /**
     * Arrêté préfet, parties prenantes
     * @type {string}
     * @memberof Tri
     */
    'date_arrete_prefet_parties_prenantes'?: string;
    /**
     * Libellé bassin de risque
     * @type {string}
     * @memberof Tri
     */
    'libelle_bassin_risques'?: string;
    /**
     * Libellé commentaires
     * @type {string}
     * @memberof Tri
     */
    'libelle_commentaire'?: string;
    /**
     * Libellé de la commune
     * @type {string}
     * @memberof Tri
     */
    'libelle_commune'?: string;
    /**
     * ${api.georisques.gaspar.tri.libazi.description}
     * @type {string}
     * @memberof Tri
     */
    'libelle_tri'?: string;
    /**
     * Détail du risque gaspar
     * @type {Array<RisqueGaspar>}
     * @memberof Tri
     */
    'liste_libelle_risque'?: Array<RisqueGaspar>;
}
/**
 * 
 * @export
 * @interface ZonageArgile
 */
export interface ZonageArgile {
    /**
     * 
     * @type {string}
     * @memberof ZonageArgile
     */
    'codeExposition'?: string;
    /**
     * 
     * @type {string}
     * @memberof ZonageArgile
     */
    'exposition'?: string;
}
/**
 * 
 * @export
 * @interface ZonageSismique
 */
export interface ZonageSismique {
    /**
     * Identifiant unique INSEE de la commune
     * @type {string}
     * @memberof ZonageSismique
     */
    'code_insee'?: string;
    /**
     * Code du zonage sismique
     * @type {string}
     * @memberof ZonageSismique
     */
    'code_zone'?: string;
    /**
     * Libellé de la commune
     * @type {string}
     * @memberof ZonageSismique
     */
    'libelle_commune'?: string;
    /**
     * Libellé du zonage sismique
     * @type {string}
     * @memberof ZonageSismique
     */
    'zone_sismicite'?: string;
}

/**
 * AZIApi - axios parameter creator
 * @export
 */
export const AZIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Ce service permet de lister les Atlas de Zones Inondables (AZI) recensés sur le territoire concerné, suivant une emprise spatiale définie, à  savoir un rayon de recherche pour un point défini, une ou plusieurs communes.
         * @summary Lister les Atlas de Zones Inondables (AZI) recensés sur le territoire concerné
         * @param {string} [codeInsee] Code(s) INSEE de la commune, si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee&#x3D;45234,45100, le nombre maximum de code est 10. Ce type de recherche ne peut pas être combinée avec une recherche au rayon.
         * @param {string} [latlon] Saisir un point sous la forme longitude / latitude. Le séparateur de décimales est toujours le point. La paire de coordonnées est séparée par une virgule. exemple : 2.29253,48.92572
         * @param {number} [page] Numéro de la page
         * @param {number} [pageSize] Taille des pages
         * @param {number} [rayon] Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à  10 000 mètres. Par défaut le rayon de recherche est fixé à  1000 mètres.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rechercheRisquesUsingGET: async (codeInsee?: string, latlon?: string, page?: number, pageSize?: number, rayon?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/gaspar/azi`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (codeInsee !== undefined) {
                localVarQueryParameter['code_insee'] = codeInsee;
            }

            if (latlon !== undefined) {
                localVarQueryParameter['latlon'] = latlon;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (rayon !== undefined) {
                localVarQueryParameter['rayon'] = rayon;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AZIApi - functional programming interface
 * @export
 */
export const AZIApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AZIApiAxiosParamCreator(configuration)
    return {
        /**
         * Ce service permet de lister les Atlas de Zones Inondables (AZI) recensés sur le territoire concerné, suivant une emprise spatiale définie, à  savoir un rayon de recherche pour un point défini, une ou plusieurs communes.
         * @summary Lister les Atlas de Zones Inondables (AZI) recensés sur le territoire concerné
         * @param {string} [codeInsee] Code(s) INSEE de la commune, si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee&#x3D;45234,45100, le nombre maximum de code est 10. Ce type de recherche ne peut pas être combinée avec une recherche au rayon.
         * @param {string} [latlon] Saisir un point sous la forme longitude / latitude. Le séparateur de décimales est toujours le point. La paire de coordonnées est séparée par une virgule. exemple : 2.29253,48.92572
         * @param {number} [page] Numéro de la page
         * @param {number} [pageSize] Taille des pages
         * @param {number} [rayon] Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à  10 000 mètres. Par défaut le rayon de recherche est fixé à  1000 mètres.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rechercheRisquesUsingGET(codeInsee?: string, latlon?: string, page?: number, pageSize?: number, rayon?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResponseAzi>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rechercheRisquesUsingGET(codeInsee, latlon, page, pageSize, rayon, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AZIApi - factory interface
 * @export
 */
export const AZIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AZIApiFp(configuration)
    return {
        /**
         * Ce service permet de lister les Atlas de Zones Inondables (AZI) recensés sur le territoire concerné, suivant une emprise spatiale définie, à  savoir un rayon de recherche pour un point défini, une ou plusieurs communes.
         * @summary Lister les Atlas de Zones Inondables (AZI) recensés sur le territoire concerné
         * @param {string} [codeInsee] Code(s) INSEE de la commune, si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee&#x3D;45234,45100, le nombre maximum de code est 10. Ce type de recherche ne peut pas être combinée avec une recherche au rayon.
         * @param {string} [latlon] Saisir un point sous la forme longitude / latitude. Le séparateur de décimales est toujours le point. La paire de coordonnées est séparée par une virgule. exemple : 2.29253,48.92572
         * @param {number} [page] Numéro de la page
         * @param {number} [pageSize] Taille des pages
         * @param {number} [rayon] Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à  10 000 mètres. Par défaut le rayon de recherche est fixé à  1000 mètres.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rechercheRisquesUsingGET(codeInsee?: string, latlon?: string, page?: number, pageSize?: number, rayon?: number, options?: any): AxiosPromise<PaginatedResponseAzi> {
            return localVarFp.rechercheRisquesUsingGET(codeInsee, latlon, page, pageSize, rayon, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AZIApi - object-oriented interface
 * @export
 * @class AZIApi
 * @extends {BaseAPI}
 */
export class AZIApi extends BaseAPI {
    /**
     * Ce service permet de lister les Atlas de Zones Inondables (AZI) recensés sur le territoire concerné, suivant une emprise spatiale définie, à  savoir un rayon de recherche pour un point défini, une ou plusieurs communes.
     * @summary Lister les Atlas de Zones Inondables (AZI) recensés sur le territoire concerné
     * @param {string} [codeInsee] Code(s) INSEE de la commune, si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee&#x3D;45234,45100, le nombre maximum de code est 10. Ce type de recherche ne peut pas être combinée avec une recherche au rayon.
     * @param {string} [latlon] Saisir un point sous la forme longitude / latitude. Le séparateur de décimales est toujours le point. La paire de coordonnées est séparée par une virgule. exemple : 2.29253,48.92572
     * @param {number} [page] Numéro de la page
     * @param {number} [pageSize] Taille des pages
     * @param {number} [rayon] Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à  10 000 mètres. Par défaut le rayon de recherche est fixé à  1000 mètres.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AZIApi
     */
    public rechercheRisquesUsingGET(codeInsee?: string, latlon?: string, page?: number, pageSize?: number, rayon?: number, options?: AxiosRequestConfig) {
        return AZIApiFp(this.configuration).rechercheRisquesUsingGET(codeInsee, latlon, page, pageSize, rayon, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CATNATApi - axios parameter creator
 * @export
 */
export const CATNATApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Ce service permet de lister les arrêtés de catastrophe naturelle, suivant une emprise spatiale définie, à  savoir un rayon de recherche pour un point défini, une ou plusieurs communes.
         * @summary Lister les arrêtés de catastrophe naturelle
         * @param {string} [codeInsee] Code(s) INSEE de la commune, si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee&#x3D;45234,45100, le nombre maximum de code est 10. Ce type de recherche ne peut pas être combinée avec une recherche au rayon.
         * @param {string} [latlon] Saisir un point sous la forme longitude / latitude. Le séparateur de décimales est toujours le point. La paire de coordonnées est séparée par une virgule. exemple : 2.29253,48.92572
         * @param {number} [page] Numéro de la page
         * @param {number} [pageSize] Taille des pages
         * @param {number} [rayon] Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à  10 000 mètres. Par défaut le rayon de recherche est fixé à  1000 mètres.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rechercheCatNatUsingGET: async (codeInsee?: string, latlon?: string, page?: number, pageSize?: number, rayon?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/gaspar/catnat`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (codeInsee !== undefined) {
                localVarQueryParameter['code_insee'] = codeInsee;
            }

            if (latlon !== undefined) {
                localVarQueryParameter['latlon'] = latlon;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (rayon !== undefined) {
                localVarQueryParameter['rayon'] = rayon;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CATNATApi - functional programming interface
 * @export
 */
export const CATNATApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CATNATApiAxiosParamCreator(configuration)
    return {
        /**
         * Ce service permet de lister les arrêtés de catastrophe naturelle, suivant une emprise spatiale définie, à  savoir un rayon de recherche pour un point défini, une ou plusieurs communes.
         * @summary Lister les arrêtés de catastrophe naturelle
         * @param {string} [codeInsee] Code(s) INSEE de la commune, si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee&#x3D;45234,45100, le nombre maximum de code est 10. Ce type de recherche ne peut pas être combinée avec une recherche au rayon.
         * @param {string} [latlon] Saisir un point sous la forme longitude / latitude. Le séparateur de décimales est toujours le point. La paire de coordonnées est séparée par une virgule. exemple : 2.29253,48.92572
         * @param {number} [page] Numéro de la page
         * @param {number} [pageSize] Taille des pages
         * @param {number} [rayon] Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à  10 000 mètres. Par défaut le rayon de recherche est fixé à  1000 mètres.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rechercheCatNatUsingGET(codeInsee?: string, latlon?: string, page?: number, pageSize?: number, rayon?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResponseCatNat>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rechercheCatNatUsingGET(codeInsee, latlon, page, pageSize, rayon, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CATNATApi - factory interface
 * @export
 */
export const CATNATApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CATNATApiFp(configuration)
    return {
        /**
         * Ce service permet de lister les arrêtés de catastrophe naturelle, suivant une emprise spatiale définie, à  savoir un rayon de recherche pour un point défini, une ou plusieurs communes.
         * @summary Lister les arrêtés de catastrophe naturelle
         * @param {string} [codeInsee] Code(s) INSEE de la commune, si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee&#x3D;45234,45100, le nombre maximum de code est 10. Ce type de recherche ne peut pas être combinée avec une recherche au rayon.
         * @param {string} [latlon] Saisir un point sous la forme longitude / latitude. Le séparateur de décimales est toujours le point. La paire de coordonnées est séparée par une virgule. exemple : 2.29253,48.92572
         * @param {number} [page] Numéro de la page
         * @param {number} [pageSize] Taille des pages
         * @param {number} [rayon] Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à  10 000 mètres. Par défaut le rayon de recherche est fixé à  1000 mètres.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rechercheCatNatUsingGET(codeInsee?: string, latlon?: string, page?: number, pageSize?: number, rayon?: number, options?: any): AxiosPromise<PaginatedResponseCatNat> {
            return localVarFp.rechercheCatNatUsingGET(codeInsee, latlon, page, pageSize, rayon, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CATNATApi - object-oriented interface
 * @export
 * @class CATNATApi
 * @extends {BaseAPI}
 */
export class CATNATApi extends BaseAPI {
    /**
     * Ce service permet de lister les arrêtés de catastrophe naturelle, suivant une emprise spatiale définie, à  savoir un rayon de recherche pour un point défini, une ou plusieurs communes.
     * @summary Lister les arrêtés de catastrophe naturelle
     * @param {string} [codeInsee] Code(s) INSEE de la commune, si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee&#x3D;45234,45100, le nombre maximum de code est 10. Ce type de recherche ne peut pas être combinée avec une recherche au rayon.
     * @param {string} [latlon] Saisir un point sous la forme longitude / latitude. Le séparateur de décimales est toujours le point. La paire de coordonnées est séparée par une virgule. exemple : 2.29253,48.92572
     * @param {number} [page] Numéro de la page
     * @param {number} [pageSize] Taille des pages
     * @param {number} [rayon] Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à  10 000 mètres. Par défaut le rayon de recherche est fixé à  1000 mètres.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CATNATApi
     */
    public rechercheCatNatUsingGET(codeInsee?: string, latlon?: string, page?: number, pageSize?: number, rayon?: number, options?: AxiosRequestConfig) {
        return CATNATApiFp(this.configuration).rechercheCatNatUsingGET(codeInsee, latlon, page, pageSize, rayon, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CavitesApi - axios parameter creator
 * @export
 */
export const CavitesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Cette interface est conçue pour diffuser les données sur les cavités souterraines.
         * @summary Cette interface est conçue pour diffuser les données sur les cavités souterraines.
         * @param {string} [codeInsee] Code(s) INSEE de la commune. Si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee&#x3D;45234,45100. Le nombre maximum de codes est 10. Ce type de recherche ne peut pas être combiné avec une recherche au rayon.
         * @param {string} [departement] Le code du département recherché
         * @param {string} [identifiant] Identifiant de la cavité souterraine
         * @param {string} [latlon] Saisir un point sous la forme longitude / latitude. Le séparateur de décimales est toujours un point. La paire de coordonnées est separée par une virgule. Exemple : 1.939266,47.861961
         * @param {number} [page] Numéro de la page
         * @param {number} [pageSize] Taille des pages
         * @param {number} [rayon] Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à 10 000 mètres. Par defaut le rayon de recherche est fixé a 1000 mètres.
         * @param {string} [region] Le code de la région recherchée
         * @param {string} [type] Type de cavité souterraine                                     &lt;br&gt;- Cave &lt;br&gt;- Naturelle &lt;br&gt;- Indéterminé &lt;br&gt;- Ouvrage civil &lt;br&gt;- Puits &lt;br&gt;- Divers &lt;br&gt;- Galerie &lt;br&gt;- Carrière &lt;br&gt;- Indice &lt;br&gt;- Ouvrage militaire &lt;br&gt;- Réseau galeries &lt;br&gt;- Souterrain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rechercheRisquesUsingGET1: async (codeInsee?: string, departement?: string, identifiant?: string, latlon?: string, page?: number, pageSize?: number, rayon?: number, region?: string, type?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/cavites`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (codeInsee !== undefined) {
                localVarQueryParameter['code_insee'] = codeInsee;
            }

            if (departement !== undefined) {
                localVarQueryParameter['departement'] = departement;
            }

            if (identifiant !== undefined) {
                localVarQueryParameter['identifiant'] = identifiant;
            }

            if (latlon !== undefined) {
                localVarQueryParameter['latlon'] = latlon;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (rayon !== undefined) {
                localVarQueryParameter['rayon'] = rayon;
            }

            if (region !== undefined) {
                localVarQueryParameter['region'] = region;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CavitesApi - functional programming interface
 * @export
 */
export const CavitesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CavitesApiAxiosParamCreator(configuration)
    return {
        /**
         * Cette interface est conçue pour diffuser les données sur les cavités souterraines.
         * @summary Cette interface est conçue pour diffuser les données sur les cavités souterraines.
         * @param {string} [codeInsee] Code(s) INSEE de la commune. Si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee&#x3D;45234,45100. Le nombre maximum de codes est 10. Ce type de recherche ne peut pas être combiné avec une recherche au rayon.
         * @param {string} [departement] Le code du département recherché
         * @param {string} [identifiant] Identifiant de la cavité souterraine
         * @param {string} [latlon] Saisir un point sous la forme longitude / latitude. Le séparateur de décimales est toujours un point. La paire de coordonnées est separée par une virgule. Exemple : 1.939266,47.861961
         * @param {number} [page] Numéro de la page
         * @param {number} [pageSize] Taille des pages
         * @param {number} [rayon] Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à 10 000 mètres. Par defaut le rayon de recherche est fixé a 1000 mètres.
         * @param {string} [region] Le code de la région recherchée
         * @param {string} [type] Type de cavité souterraine                                     &lt;br&gt;- Cave &lt;br&gt;- Naturelle &lt;br&gt;- Indéterminé &lt;br&gt;- Ouvrage civil &lt;br&gt;- Puits &lt;br&gt;- Divers &lt;br&gt;- Galerie &lt;br&gt;- Carrière &lt;br&gt;- Indice &lt;br&gt;- Ouvrage militaire &lt;br&gt;- Réseau galeries &lt;br&gt;- Souterrain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rechercheRisquesUsingGET1(codeInsee?: string, departement?: string, identifiant?: string, latlon?: string, page?: number, pageSize?: number, rayon?: number, region?: string, type?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResponseCavites>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rechercheRisquesUsingGET1(codeInsee, departement, identifiant, latlon, page, pageSize, rayon, region, type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CavitesApi - factory interface
 * @export
 */
export const CavitesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CavitesApiFp(configuration)
    return {
        /**
         * Cette interface est conçue pour diffuser les données sur les cavités souterraines.
         * @summary Cette interface est conçue pour diffuser les données sur les cavités souterraines.
         * @param {string} [codeInsee] Code(s) INSEE de la commune. Si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee&#x3D;45234,45100. Le nombre maximum de codes est 10. Ce type de recherche ne peut pas être combiné avec une recherche au rayon.
         * @param {string} [departement] Le code du département recherché
         * @param {string} [identifiant] Identifiant de la cavité souterraine
         * @param {string} [latlon] Saisir un point sous la forme longitude / latitude. Le séparateur de décimales est toujours un point. La paire de coordonnées est separée par une virgule. Exemple : 1.939266,47.861961
         * @param {number} [page] Numéro de la page
         * @param {number} [pageSize] Taille des pages
         * @param {number} [rayon] Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à 10 000 mètres. Par defaut le rayon de recherche est fixé a 1000 mètres.
         * @param {string} [region] Le code de la région recherchée
         * @param {string} [type] Type de cavité souterraine                                     &lt;br&gt;- Cave &lt;br&gt;- Naturelle &lt;br&gt;- Indéterminé &lt;br&gt;- Ouvrage civil &lt;br&gt;- Puits &lt;br&gt;- Divers &lt;br&gt;- Galerie &lt;br&gt;- Carrière &lt;br&gt;- Indice &lt;br&gt;- Ouvrage militaire &lt;br&gt;- Réseau galeries &lt;br&gt;- Souterrain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rechercheRisquesUsingGET1(codeInsee?: string, departement?: string, identifiant?: string, latlon?: string, page?: number, pageSize?: number, rayon?: number, region?: string, type?: string, options?: any): AxiosPromise<PaginatedResponseCavites> {
            return localVarFp.rechercheRisquesUsingGET1(codeInsee, departement, identifiant, latlon, page, pageSize, rayon, region, type, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CavitesApi - object-oriented interface
 * @export
 * @class CavitesApi
 * @extends {BaseAPI}
 */
export class CavitesApi extends BaseAPI {
    /**
     * Cette interface est conçue pour diffuser les données sur les cavités souterraines.
     * @summary Cette interface est conçue pour diffuser les données sur les cavités souterraines.
     * @param {string} [codeInsee] Code(s) INSEE de la commune. Si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee&#x3D;45234,45100. Le nombre maximum de codes est 10. Ce type de recherche ne peut pas être combiné avec une recherche au rayon.
     * @param {string} [departement] Le code du département recherché
     * @param {string} [identifiant] Identifiant de la cavité souterraine
     * @param {string} [latlon] Saisir un point sous la forme longitude / latitude. Le séparateur de décimales est toujours un point. La paire de coordonnées est separée par une virgule. Exemple : 1.939266,47.861961
     * @param {number} [page] Numéro de la page
     * @param {number} [pageSize] Taille des pages
     * @param {number} [rayon] Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à 10 000 mètres. Par defaut le rayon de recherche est fixé a 1000 mètres.
     * @param {string} [region] Le code de la région recherchée
     * @param {string} [type] Type de cavité souterraine                                     &lt;br&gt;- Cave &lt;br&gt;- Naturelle &lt;br&gt;- Indéterminé &lt;br&gt;- Ouvrage civil &lt;br&gt;- Puits &lt;br&gt;- Divers &lt;br&gt;- Galerie &lt;br&gt;- Carrière &lt;br&gt;- Indice &lt;br&gt;- Ouvrage militaire &lt;br&gt;- Réseau galeries &lt;br&gt;- Souterrain
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CavitesApi
     */
    public rechercheRisquesUsingGET1(codeInsee?: string, departement?: string, identifiant?: string, latlon?: string, page?: number, pageSize?: number, rayon?: number, region?: string, type?: string, options?: AxiosRequestConfig) {
        return CavitesApiFp(this.configuration).rechercheRisquesUsingGET1(codeInsee, departement, identifiant, latlon, page, pageSize, rayon, region, type, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DICRIMApi - axios parameter creator
 * @export
 */
export const DICRIMApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Ce service permet de lister les Documents d\'Information Communal sur les Risques Majeurs (DICRIM) sur le territoire concerné, suivant une emprise spatiale définie, à  savoir un rayon de recherche pour un point défini, une ou plusieurs communes.
         * @summary Lister les Documents d\'Information Communal sur les Risques Majeurs (DICRIM) sur le territoire concerné
         * @param {string} [codeInsee] Code(s) INSEE de la commune, si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee&#x3D;45234,45100, le nombre maximum de code est 10. Ce type de recherche ne peut pas être combinée avec une recherche au rayon.
         * @param {string} [latlon] Saisir un point sous la forme longitude / latitude. Le séparateur de décimales est toujours le point. La paire de coordonnées est séparée par une virgule. exemple : 2.29253,48.92572
         * @param {number} [page] Numéro de la page
         * @param {number} [pageSize] Taille des pages
         * @param {number} [rayon] Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à  10 000 mètres. Par défaut le rayon de recherche est fixé à  1000 mètres.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rechercheRisquesUsingGET2: async (codeInsee?: string, latlon?: string, page?: number, pageSize?: number, rayon?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/gaspar/dicrim`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (codeInsee !== undefined) {
                localVarQueryParameter['code_insee'] = codeInsee;
            }

            if (latlon !== undefined) {
                localVarQueryParameter['latlon'] = latlon;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (rayon !== undefined) {
                localVarQueryParameter['rayon'] = rayon;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DICRIMApi - functional programming interface
 * @export
 */
export const DICRIMApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DICRIMApiAxiosParamCreator(configuration)
    return {
        /**
         * Ce service permet de lister les Documents d\'Information Communal sur les Risques Majeurs (DICRIM) sur le territoire concerné, suivant une emprise spatiale définie, à  savoir un rayon de recherche pour un point défini, une ou plusieurs communes.
         * @summary Lister les Documents d\'Information Communal sur les Risques Majeurs (DICRIM) sur le territoire concerné
         * @param {string} [codeInsee] Code(s) INSEE de la commune, si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee&#x3D;45234,45100, le nombre maximum de code est 10. Ce type de recherche ne peut pas être combinée avec une recherche au rayon.
         * @param {string} [latlon] Saisir un point sous la forme longitude / latitude. Le séparateur de décimales est toujours le point. La paire de coordonnées est séparée par une virgule. exemple : 2.29253,48.92572
         * @param {number} [page] Numéro de la page
         * @param {number} [pageSize] Taille des pages
         * @param {number} [rayon] Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à  10 000 mètres. Par défaut le rayon de recherche est fixé à  1000 mètres.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rechercheRisquesUsingGET2(codeInsee?: string, latlon?: string, page?: number, pageSize?: number, rayon?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResponseDicrim>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rechercheRisquesUsingGET2(codeInsee, latlon, page, pageSize, rayon, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DICRIMApi - factory interface
 * @export
 */
export const DICRIMApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DICRIMApiFp(configuration)
    return {
        /**
         * Ce service permet de lister les Documents d\'Information Communal sur les Risques Majeurs (DICRIM) sur le territoire concerné, suivant une emprise spatiale définie, à  savoir un rayon de recherche pour un point défini, une ou plusieurs communes.
         * @summary Lister les Documents d\'Information Communal sur les Risques Majeurs (DICRIM) sur le territoire concerné
         * @param {string} [codeInsee] Code(s) INSEE de la commune, si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee&#x3D;45234,45100, le nombre maximum de code est 10. Ce type de recherche ne peut pas être combinée avec une recherche au rayon.
         * @param {string} [latlon] Saisir un point sous la forme longitude / latitude. Le séparateur de décimales est toujours le point. La paire de coordonnées est séparée par une virgule. exemple : 2.29253,48.92572
         * @param {number} [page] Numéro de la page
         * @param {number} [pageSize] Taille des pages
         * @param {number} [rayon] Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à  10 000 mètres. Par défaut le rayon de recherche est fixé à  1000 mètres.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rechercheRisquesUsingGET2(codeInsee?: string, latlon?: string, page?: number, pageSize?: number, rayon?: number, options?: any): AxiosPromise<PaginatedResponseDicrim> {
            return localVarFp.rechercheRisquesUsingGET2(codeInsee, latlon, page, pageSize, rayon, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DICRIMApi - object-oriented interface
 * @export
 * @class DICRIMApi
 * @extends {BaseAPI}
 */
export class DICRIMApi extends BaseAPI {
    /**
     * Ce service permet de lister les Documents d\'Information Communal sur les Risques Majeurs (DICRIM) sur le territoire concerné, suivant une emprise spatiale définie, à  savoir un rayon de recherche pour un point défini, une ou plusieurs communes.
     * @summary Lister les Documents d\'Information Communal sur les Risques Majeurs (DICRIM) sur le territoire concerné
     * @param {string} [codeInsee] Code(s) INSEE de la commune, si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee&#x3D;45234,45100, le nombre maximum de code est 10. Ce type de recherche ne peut pas être combinée avec une recherche au rayon.
     * @param {string} [latlon] Saisir un point sous la forme longitude / latitude. Le séparateur de décimales est toujours le point. La paire de coordonnées est séparée par une virgule. exemple : 2.29253,48.92572
     * @param {number} [page] Numéro de la page
     * @param {number} [pageSize] Taille des pages
     * @param {number} [rayon] Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à  10 000 mètres. Par défaut le rayon de recherche est fixé à  1000 mètres.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DICRIMApi
     */
    public rechercheRisquesUsingGET2(codeInsee?: string, latlon?: string, page?: number, pageSize?: number, rayon?: number, options?: AxiosRequestConfig) {
        return DICRIMApiFp(this.configuration).rechercheRisquesUsingGET2(codeInsee, latlon, page, pageSize, rayon, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EtatsDocumentsPPRApi - axios parameter creator
 * @export
 */
export const EtatsDocumentsPPRApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Lexique des différents états d\'un document PPR (codification issue du standard PPRN / PPRT de la Commission de validation des données pour l\'information spatialisée (COVADIS))
         * @summary Lister les différents états d\'un document PPR
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rechercheEtatDocsUsingGET: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/ppr/etats_documents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EtatsDocumentsPPRApi - functional programming interface
 * @export
 */
export const EtatsDocumentsPPRApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EtatsDocumentsPPRApiAxiosParamCreator(configuration)
    return {
        /**
         * Lexique des différents états d\'un document PPR (codification issue du standard PPRN / PPRT de la Commission de validation des données pour l\'information spatialisée (COVADIS))
         * @summary Lister les différents états d\'un document PPR
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rechercheEtatDocsUsingGET(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResponseEtatPPR>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rechercheEtatDocsUsingGET(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EtatsDocumentsPPRApi - factory interface
 * @export
 */
export const EtatsDocumentsPPRApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EtatsDocumentsPPRApiFp(configuration)
    return {
        /**
         * Lexique des différents états d\'un document PPR (codification issue du standard PPRN / PPRT de la Commission de validation des données pour l\'information spatialisée (COVADIS))
         * @summary Lister les différents états d\'un document PPR
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rechercheEtatDocsUsingGET(options?: any): AxiosPromise<PaginatedResponseEtatPPR> {
            return localVarFp.rechercheEtatDocsUsingGET(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EtatsDocumentsPPRApi - object-oriented interface
 * @export
 * @class EtatsDocumentsPPRApi
 * @extends {BaseAPI}
 */
export class EtatsDocumentsPPRApi extends BaseAPI {
    /**
     * Lexique des différents états d\'un document PPR (codification issue du standard PPRN / PPRT de la Commission de validation des données pour l\'information spatialisée (COVADIS))
     * @summary Lister les différents états d\'un document PPR
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EtatsDocumentsPPRApi
     */
    public rechercheEtatDocsUsingGET(options?: AxiosRequestConfig) {
        return EtatsDocumentsPPRApiFp(this.configuration).rechercheEtatDocsUsingGET(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FamillesRisquePPRApi - axios parameter creator
 * @export
 */
export const FamillesRisquePPRApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Lexique des familles de risques de la base de données GASPAR (codification issue du standard PPRN / PPRT de la Commission de validation des données pour l\'information spatialisée (COVADIS))
         * @summary Lister les familles de risques
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rechercheRisqueUsingGET: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/ppr/famille_risques`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FamillesRisquePPRApi - functional programming interface
 * @export
 */
export const FamillesRisquePPRApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FamillesRisquePPRApiAxiosParamCreator(configuration)
    return {
        /**
         * Lexique des familles de risques de la base de données GASPAR (codification issue du standard PPRN / PPRT de la Commission de validation des données pour l\'information spatialisée (COVADIS))
         * @summary Lister les familles de risques
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rechercheRisqueUsingGET(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResponseFamilleRisques>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rechercheRisqueUsingGET(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FamillesRisquePPRApi - factory interface
 * @export
 */
export const FamillesRisquePPRApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FamillesRisquePPRApiFp(configuration)
    return {
        /**
         * Lexique des familles de risques de la base de données GASPAR (codification issue du standard PPRN / PPRT de la Commission de validation des données pour l\'information spatialisée (COVADIS))
         * @summary Lister les familles de risques
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rechercheRisqueUsingGET(options?: any): AxiosPromise<PaginatedResponseFamilleRisques> {
            return localVarFp.rechercheRisqueUsingGET(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FamillesRisquePPRApi - object-oriented interface
 * @export
 * @class FamillesRisquePPRApi
 * @extends {BaseAPI}
 */
export class FamillesRisquePPRApi extends BaseAPI {
    /**
     * Lexique des familles de risques de la base de données GASPAR (codification issue du standard PPRN / PPRT de la Commission de validation des données pour l\'information spatialisée (COVADIS))
     * @summary Lister les familles de risques
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FamillesRisquePPRApi
     */
    public rechercheRisqueUsingGET(options?: AxiosRequestConfig) {
        return FamillesRisquePPRApiFp(this.configuration).rechercheRisqueUsingGET(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * InstallationsClassesApi - axios parameter creator
 * @export
 */
export const InstallationsClassesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Cette interface est conçue pour diffuser les données installations classées de Gun Env à destination de Géorisques.
         * @summary Cette interface est conçue pour diffuser les données installations classées de Gun Env à destination de Géorisques.
         * @param {string} [activite] Le code de l\&#39;activité principale de l\&#39;établissement, tel que défini dans la nomenclature NAF v2 (ex. 01, 02, etc.) : &lt;br&gt;https://www.insee.fr/fr/information/2406147
         * @param {Array<string>} [codeInsee] Code(s) INSEE de la commune. Si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee&#x3D;45234,45100. Le nombre maximum de codes est 10. Ce type de recherche ne peut pas être combiné avec une recherche au rayon.
         * @param {Array<string>} [codeAIOT] Code(s) de(s) (l\&#39;)installation(s) classée(s) à 10 chiffres.Si plusieurs codes, les séparer par une virgule,par exemple  : codeAIOT&#x3D;0005402775,0005602790.
         * @param {string} [dateMaj] Date de modification des données. La date est au format \&quot;AAAA-MM-JJ\&quot;. L\&#39;API renvoie tous les établissements dont la date de modification est supérieure ou égale à dateMaj.
         * @param {string} [debutInspection] Date d\&#39;inspection minimum à recherchée. La date est au format \&quot;AAAA-MM-JJ\&quot;.
         * @param {string} [departement] Le code du département recherché
         * @param {string} [finInspection] Date d\&#39;inspection maximum à recherchée. La date est au format \&quot;AAAA-MM-JJ\&quot;.
         * @param {boolean} [ied] Etablissement « IED-MTD » - true/false
         * @param {string} [latlon] Saisir un point sous la forme longitude / latitude. Le séparateur de décimales est toujours un point. La paire de coordonnées est separée par une virgule. Exemple : 2.29253,48.92572
         * @param {Array<string>} [nomenclature] La liste des codes de nomenclatures d\&#39;installations classées. &lt;br&gt;La liste des valeurs est séparée par une virgule (ex. 1455, 1531, etc.) &lt;br&gt; &lt;br&gt;La liste des nomenclatures est disponible à l\&#39;adresse suivante : &lt;br&gt;https://aida.ineris.fr/liste_documents/1/18023/1
         * @param {number} [page] Numéro de la page
         * @param {number} [pageSize] Taille des pages
         * @param {boolean} [prioriteNationale] Etablissement « priorité nationale » - true/false
         * @param {string} [raisonSociale] Tout ou partie d\&#39;un nom d\&#39;établissement recherché et insensible à la casse
         * @param {number} [rayon] Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à 10 000 mètres. Par defaut le rayon de recherche est fixé a 1000 mètres.
         * @param {string} [regime] Le code du régime de l\&#39;établissement : &lt;br&gt;- A : Autorisation &lt;br&gt;- E : Enregistrement &lt;br&gt;- AUTRE : Autre régime 
         * @param {string} [region] Le code de la région recherchée
         * @param {Array<string>} [siret] Code(s) siret de l\&#39;installation classée.Si plusieurs codes, les séparer par une virgule, par exemple  : siret&#x3D;48335930300011,35392644700130.
         * @param {string} [statutSeveso] Le code du statut SEVESO de l\&#39;établissement : &lt;br&gt;- 1 : Seveso seuil haut &lt;br&gt;- 2 : Seveso seuil bas &lt;br&gt;- 3 : Non Seveso
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rechercherAiotsParGeolocalisationUsingGET: async (activite?: string, codeInsee?: Array<string>, codeAIOT?: Array<string>, dateMaj?: string, debutInspection?: string, departement?: string, finInspection?: string, ied?: boolean, latlon?: string, nomenclature?: Array<string>, page?: number, pageSize?: number, prioriteNationale?: boolean, raisonSociale?: string, rayon?: number, regime?: string, region?: string, siret?: Array<string>, statutSeveso?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/installations_classees`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (activite !== undefined) {
                localVarQueryParameter['activite'] = activite;
            }

            if (codeInsee) {
                localVarQueryParameter['code_insee'] = codeInsee;
            }

            if (codeAIOT) {
                localVarQueryParameter['codeAIOT'] = codeAIOT;
            }

            if (dateMaj !== undefined) {
                localVarQueryParameter['dateMaj'] = dateMaj;
            }

            if (debutInspection !== undefined) {
                localVarQueryParameter['debutInspection'] = debutInspection;
            }

            if (departement !== undefined) {
                localVarQueryParameter['departement'] = departement;
            }

            if (finInspection !== undefined) {
                localVarQueryParameter['finInspection'] = finInspection;
            }

            if (ied !== undefined) {
                localVarQueryParameter['ied'] = ied;
            }

            if (latlon !== undefined) {
                localVarQueryParameter['latlon'] = latlon;
            }

            if (nomenclature) {
                localVarQueryParameter['nomenclature'] = nomenclature;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (prioriteNationale !== undefined) {
                localVarQueryParameter['prioriteNationale'] = prioriteNationale;
            }

            if (raisonSociale !== undefined) {
                localVarQueryParameter['raisonSociale'] = raisonSociale;
            }

            if (rayon !== undefined) {
                localVarQueryParameter['rayon'] = rayon;
            }

            if (regime !== undefined) {
                localVarQueryParameter['regime'] = regime;
            }

            if (region !== undefined) {
                localVarQueryParameter['region'] = region;
            }

            if (siret) {
                localVarQueryParameter['siret'] = siret;
            }

            if (statutSeveso !== undefined) {
                localVarQueryParameter['statutSeveso'] = statutSeveso;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InstallationsClassesApi - functional programming interface
 * @export
 */
export const InstallationsClassesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InstallationsClassesApiAxiosParamCreator(configuration)
    return {
        /**
         * Cette interface est conçue pour diffuser les données installations classées de Gun Env à destination de Géorisques.
         * @summary Cette interface est conçue pour diffuser les données installations classées de Gun Env à destination de Géorisques.
         * @param {string} [activite] Le code de l\&#39;activité principale de l\&#39;établissement, tel que défini dans la nomenclature NAF v2 (ex. 01, 02, etc.) : &lt;br&gt;https://www.insee.fr/fr/information/2406147
         * @param {Array<string>} [codeInsee] Code(s) INSEE de la commune. Si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee&#x3D;45234,45100. Le nombre maximum de codes est 10. Ce type de recherche ne peut pas être combiné avec une recherche au rayon.
         * @param {Array<string>} [codeAIOT] Code(s) de(s) (l\&#39;)installation(s) classée(s) à 10 chiffres.Si plusieurs codes, les séparer par une virgule,par exemple  : codeAIOT&#x3D;0005402775,0005602790.
         * @param {string} [dateMaj] Date de modification des données. La date est au format \&quot;AAAA-MM-JJ\&quot;. L\&#39;API renvoie tous les établissements dont la date de modification est supérieure ou égale à dateMaj.
         * @param {string} [debutInspection] Date d\&#39;inspection minimum à recherchée. La date est au format \&quot;AAAA-MM-JJ\&quot;.
         * @param {string} [departement] Le code du département recherché
         * @param {string} [finInspection] Date d\&#39;inspection maximum à recherchée. La date est au format \&quot;AAAA-MM-JJ\&quot;.
         * @param {boolean} [ied] Etablissement « IED-MTD » - true/false
         * @param {string} [latlon] Saisir un point sous la forme longitude / latitude. Le séparateur de décimales est toujours un point. La paire de coordonnées est separée par une virgule. Exemple : 2.29253,48.92572
         * @param {Array<string>} [nomenclature] La liste des codes de nomenclatures d\&#39;installations classées. &lt;br&gt;La liste des valeurs est séparée par une virgule (ex. 1455, 1531, etc.) &lt;br&gt; &lt;br&gt;La liste des nomenclatures est disponible à l\&#39;adresse suivante : &lt;br&gt;https://aida.ineris.fr/liste_documents/1/18023/1
         * @param {number} [page] Numéro de la page
         * @param {number} [pageSize] Taille des pages
         * @param {boolean} [prioriteNationale] Etablissement « priorité nationale » - true/false
         * @param {string} [raisonSociale] Tout ou partie d\&#39;un nom d\&#39;établissement recherché et insensible à la casse
         * @param {number} [rayon] Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à 10 000 mètres. Par defaut le rayon de recherche est fixé a 1000 mètres.
         * @param {string} [regime] Le code du régime de l\&#39;établissement : &lt;br&gt;- A : Autorisation &lt;br&gt;- E : Enregistrement &lt;br&gt;- AUTRE : Autre régime 
         * @param {string} [region] Le code de la région recherchée
         * @param {Array<string>} [siret] Code(s) siret de l\&#39;installation classée.Si plusieurs codes, les séparer par une virgule, par exemple  : siret&#x3D;48335930300011,35392644700130.
         * @param {string} [statutSeveso] Le code du statut SEVESO de l\&#39;établissement : &lt;br&gt;- 1 : Seveso seuil haut &lt;br&gt;- 2 : Seveso seuil bas &lt;br&gt;- 3 : Non Seveso
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rechercherAiotsParGeolocalisationUsingGET(activite?: string, codeInsee?: Array<string>, codeAIOT?: Array<string>, dateMaj?: string, debutInspection?: string, departement?: string, finInspection?: string, ied?: boolean, latlon?: string, nomenclature?: Array<string>, page?: number, pageSize?: number, prioriteNationale?: boolean, raisonSociale?: string, rayon?: number, regime?: string, region?: string, siret?: Array<string>, statutSeveso?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResponseInstallationClassee>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rechercherAiotsParGeolocalisationUsingGET(activite, codeInsee, codeAIOT, dateMaj, debutInspection, departement, finInspection, ied, latlon, nomenclature, page, pageSize, prioriteNationale, raisonSociale, rayon, regime, region, siret, statutSeveso, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InstallationsClassesApi - factory interface
 * @export
 */
export const InstallationsClassesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InstallationsClassesApiFp(configuration)
    return {
        /**
         * Cette interface est conçue pour diffuser les données installations classées de Gun Env à destination de Géorisques.
         * @summary Cette interface est conçue pour diffuser les données installations classées de Gun Env à destination de Géorisques.
         * @param {string} [activite] Le code de l\&#39;activité principale de l\&#39;établissement, tel que défini dans la nomenclature NAF v2 (ex. 01, 02, etc.) : &lt;br&gt;https://www.insee.fr/fr/information/2406147
         * @param {Array<string>} [codeInsee] Code(s) INSEE de la commune. Si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee&#x3D;45234,45100. Le nombre maximum de codes est 10. Ce type de recherche ne peut pas être combiné avec une recherche au rayon.
         * @param {Array<string>} [codeAIOT] Code(s) de(s) (l\&#39;)installation(s) classée(s) à 10 chiffres.Si plusieurs codes, les séparer par une virgule,par exemple  : codeAIOT&#x3D;0005402775,0005602790.
         * @param {string} [dateMaj] Date de modification des données. La date est au format \&quot;AAAA-MM-JJ\&quot;. L\&#39;API renvoie tous les établissements dont la date de modification est supérieure ou égale à dateMaj.
         * @param {string} [debutInspection] Date d\&#39;inspection minimum à recherchée. La date est au format \&quot;AAAA-MM-JJ\&quot;.
         * @param {string} [departement] Le code du département recherché
         * @param {string} [finInspection] Date d\&#39;inspection maximum à recherchée. La date est au format \&quot;AAAA-MM-JJ\&quot;.
         * @param {boolean} [ied] Etablissement « IED-MTD » - true/false
         * @param {string} [latlon] Saisir un point sous la forme longitude / latitude. Le séparateur de décimales est toujours un point. La paire de coordonnées est separée par une virgule. Exemple : 2.29253,48.92572
         * @param {Array<string>} [nomenclature] La liste des codes de nomenclatures d\&#39;installations classées. &lt;br&gt;La liste des valeurs est séparée par une virgule (ex. 1455, 1531, etc.) &lt;br&gt; &lt;br&gt;La liste des nomenclatures est disponible à l\&#39;adresse suivante : &lt;br&gt;https://aida.ineris.fr/liste_documents/1/18023/1
         * @param {number} [page] Numéro de la page
         * @param {number} [pageSize] Taille des pages
         * @param {boolean} [prioriteNationale] Etablissement « priorité nationale » - true/false
         * @param {string} [raisonSociale] Tout ou partie d\&#39;un nom d\&#39;établissement recherché et insensible à la casse
         * @param {number} [rayon] Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à 10 000 mètres. Par defaut le rayon de recherche est fixé a 1000 mètres.
         * @param {string} [regime] Le code du régime de l\&#39;établissement : &lt;br&gt;- A : Autorisation &lt;br&gt;- E : Enregistrement &lt;br&gt;- AUTRE : Autre régime 
         * @param {string} [region] Le code de la région recherchée
         * @param {Array<string>} [siret] Code(s) siret de l\&#39;installation classée.Si plusieurs codes, les séparer par une virgule, par exemple  : siret&#x3D;48335930300011,35392644700130.
         * @param {string} [statutSeveso] Le code du statut SEVESO de l\&#39;établissement : &lt;br&gt;- 1 : Seveso seuil haut &lt;br&gt;- 2 : Seveso seuil bas &lt;br&gt;- 3 : Non Seveso
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rechercherAiotsParGeolocalisationUsingGET(activite?: string, codeInsee?: Array<string>, codeAIOT?: Array<string>, dateMaj?: string, debutInspection?: string, departement?: string, finInspection?: string, ied?: boolean, latlon?: string, nomenclature?: Array<string>, page?: number, pageSize?: number, prioriteNationale?: boolean, raisonSociale?: string, rayon?: number, regime?: string, region?: string, siret?: Array<string>, statutSeveso?: string, options?: any): AxiosPromise<PaginatedResponseInstallationClassee> {
            return localVarFp.rechercherAiotsParGeolocalisationUsingGET(activite, codeInsee, codeAIOT, dateMaj, debutInspection, departement, finInspection, ied, latlon, nomenclature, page, pageSize, prioriteNationale, raisonSociale, rayon, regime, region, siret, statutSeveso, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InstallationsClassesApi - object-oriented interface
 * @export
 * @class InstallationsClassesApi
 * @extends {BaseAPI}
 */
export class InstallationsClassesApi extends BaseAPI {
    /**
     * Cette interface est conçue pour diffuser les données installations classées de Gun Env à destination de Géorisques.
     * @summary Cette interface est conçue pour diffuser les données installations classées de Gun Env à destination de Géorisques.
     * @param {string} [activite] Le code de l\&#39;activité principale de l\&#39;établissement, tel que défini dans la nomenclature NAF v2 (ex. 01, 02, etc.) : &lt;br&gt;https://www.insee.fr/fr/information/2406147
     * @param {Array<string>} [codeInsee] Code(s) INSEE de la commune. Si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee&#x3D;45234,45100. Le nombre maximum de codes est 10. Ce type de recherche ne peut pas être combiné avec une recherche au rayon.
     * @param {Array<string>} [codeAIOT] Code(s) de(s) (l\&#39;)installation(s) classée(s) à 10 chiffres.Si plusieurs codes, les séparer par une virgule,par exemple  : codeAIOT&#x3D;0005402775,0005602790.
     * @param {string} [dateMaj] Date de modification des données. La date est au format \&quot;AAAA-MM-JJ\&quot;. L\&#39;API renvoie tous les établissements dont la date de modification est supérieure ou égale à dateMaj.
     * @param {string} [debutInspection] Date d\&#39;inspection minimum à recherchée. La date est au format \&quot;AAAA-MM-JJ\&quot;.
     * @param {string} [departement] Le code du département recherché
     * @param {string} [finInspection] Date d\&#39;inspection maximum à recherchée. La date est au format \&quot;AAAA-MM-JJ\&quot;.
     * @param {boolean} [ied] Etablissement « IED-MTD » - true/false
     * @param {string} [latlon] Saisir un point sous la forme longitude / latitude. Le séparateur de décimales est toujours un point. La paire de coordonnées est separée par une virgule. Exemple : 2.29253,48.92572
     * @param {Array<string>} [nomenclature] La liste des codes de nomenclatures d\&#39;installations classées. &lt;br&gt;La liste des valeurs est séparée par une virgule (ex. 1455, 1531, etc.) &lt;br&gt; &lt;br&gt;La liste des nomenclatures est disponible à l\&#39;adresse suivante : &lt;br&gt;https://aida.ineris.fr/liste_documents/1/18023/1
     * @param {number} [page] Numéro de la page
     * @param {number} [pageSize] Taille des pages
     * @param {boolean} [prioriteNationale] Etablissement « priorité nationale » - true/false
     * @param {string} [raisonSociale] Tout ou partie d\&#39;un nom d\&#39;établissement recherché et insensible à la casse
     * @param {number} [rayon] Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à 10 000 mètres. Par defaut le rayon de recherche est fixé a 1000 mètres.
     * @param {string} [regime] Le code du régime de l\&#39;établissement : &lt;br&gt;- A : Autorisation &lt;br&gt;- E : Enregistrement &lt;br&gt;- AUTRE : Autre régime 
     * @param {string} [region] Le code de la région recherchée
     * @param {Array<string>} [siret] Code(s) siret de l\&#39;installation classée.Si plusieurs codes, les séparer par une virgule, par exemple  : siret&#x3D;48335930300011,35392644700130.
     * @param {string} [statutSeveso] Le code du statut SEVESO de l\&#39;établissement : &lt;br&gt;- 1 : Seveso seuil haut &lt;br&gt;- 2 : Seveso seuil bas &lt;br&gt;- 3 : Non Seveso
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstallationsClassesApi
     */
    public rechercherAiotsParGeolocalisationUsingGET(activite?: string, codeInsee?: Array<string>, codeAIOT?: Array<string>, dateMaj?: string, debutInspection?: string, departement?: string, finInspection?: string, ied?: boolean, latlon?: string, nomenclature?: Array<string>, page?: number, pageSize?: number, prioriteNationale?: boolean, raisonSociale?: string, rayon?: number, regime?: string, region?: string, siret?: Array<string>, statutSeveso?: string, options?: AxiosRequestConfig) {
        return InstallationsClassesApiFp(this.configuration).rechercherAiotsParGeolocalisationUsingGET(activite, codeInsee, codeAIOT, dateMaj, debutInspection, departement, finInspection, ied, latlon, nomenclature, page, pageSize, prioriteNationale, raisonSociale, rayon, regime, region, siret, statutSeveso, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MVTApi - axios parameter creator
 * @export
 */
export const MVTApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Cette interface est conçue pour diffuser les données sur le mouvement de terrain.
         * @summary Cette interface est conçue pour diffuser les données sur le mouvement de terrain.
         * @param {string} [codeInsee] Code(s) INSEE de la commune. Si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee&#x3D;45234,45100. Le nombre maximum de codes est 10. Ce type de recherche ne peut pas être combiné avec une recherche au rayon.
         * @param {string} [departement] Le code du département recherché
         * @param {string} [fiabilite] Type de fiabilité                                    &lt;br&gt;- Faible &lt;br&gt;- Moyen &lt;br&gt;- Fort
         * @param {string} [identifiant] Identifiant du mouvement
         * @param {string} [latlon] Saisir un point sous la forme longitude / latitude. Le séparateur de décimales est toujours un point. La paire de coordonnées est separée par une virgule. Exemple : 1.939266,47.861961
         * @param {number} [page] Numéro de la page
         * @param {number} [pageSize] Taille des pages
         * @param {number} [rayon] Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à 10 000 mètres. Par defaut le rayon de recherche est fixé a 1000 mètres.
         * @param {string} [region] Le code de la région recherchée
         * @param {string} [type] Type de mouvement de terrain                   &lt;br&gt;- Effondrement / Affaissement &lt;br&gt;- Coulée &lt;br&gt;- Glissement &lt;br&gt;- Erosion de berges &lt;br&gt;- Chute de blocs / Eboulement
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rechercheRisquesUsingGET3: async (codeInsee?: string, departement?: string, fiabilite?: string, identifiant?: string, latlon?: string, page?: number, pageSize?: number, rayon?: number, region?: string, type?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/mvt`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (codeInsee !== undefined) {
                localVarQueryParameter['code_insee'] = codeInsee;
            }

            if (departement !== undefined) {
                localVarQueryParameter['departement'] = departement;
            }

            if (fiabilite !== undefined) {
                localVarQueryParameter['fiabilite'] = fiabilite;
            }

            if (identifiant !== undefined) {
                localVarQueryParameter['identifiant'] = identifiant;
            }

            if (latlon !== undefined) {
                localVarQueryParameter['latlon'] = latlon;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (rayon !== undefined) {
                localVarQueryParameter['rayon'] = rayon;
            }

            if (region !== undefined) {
                localVarQueryParameter['region'] = region;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MVTApi - functional programming interface
 * @export
 */
export const MVTApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MVTApiAxiosParamCreator(configuration)
    return {
        /**
         * Cette interface est conçue pour diffuser les données sur le mouvement de terrain.
         * @summary Cette interface est conçue pour diffuser les données sur le mouvement de terrain.
         * @param {string} [codeInsee] Code(s) INSEE de la commune. Si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee&#x3D;45234,45100. Le nombre maximum de codes est 10. Ce type de recherche ne peut pas être combiné avec une recherche au rayon.
         * @param {string} [departement] Le code du département recherché
         * @param {string} [fiabilite] Type de fiabilité                                    &lt;br&gt;- Faible &lt;br&gt;- Moyen &lt;br&gt;- Fort
         * @param {string} [identifiant] Identifiant du mouvement
         * @param {string} [latlon] Saisir un point sous la forme longitude / latitude. Le séparateur de décimales est toujours un point. La paire de coordonnées est separée par une virgule. Exemple : 1.939266,47.861961
         * @param {number} [page] Numéro de la page
         * @param {number} [pageSize] Taille des pages
         * @param {number} [rayon] Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à 10 000 mètres. Par defaut le rayon de recherche est fixé a 1000 mètres.
         * @param {string} [region] Le code de la région recherchée
         * @param {string} [type] Type de mouvement de terrain                   &lt;br&gt;- Effondrement / Affaissement &lt;br&gt;- Coulée &lt;br&gt;- Glissement &lt;br&gt;- Erosion de berges &lt;br&gt;- Chute de blocs / Eboulement
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rechercheRisquesUsingGET3(codeInsee?: string, departement?: string, fiabilite?: string, identifiant?: string, latlon?: string, page?: number, pageSize?: number, rayon?: number, region?: string, type?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResponseMvt>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rechercheRisquesUsingGET3(codeInsee, departement, fiabilite, identifiant, latlon, page, pageSize, rayon, region, type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MVTApi - factory interface
 * @export
 */
export const MVTApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MVTApiFp(configuration)
    return {
        /**
         * Cette interface est conçue pour diffuser les données sur le mouvement de terrain.
         * @summary Cette interface est conçue pour diffuser les données sur le mouvement de terrain.
         * @param {string} [codeInsee] Code(s) INSEE de la commune. Si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee&#x3D;45234,45100. Le nombre maximum de codes est 10. Ce type de recherche ne peut pas être combiné avec une recherche au rayon.
         * @param {string} [departement] Le code du département recherché
         * @param {string} [fiabilite] Type de fiabilité                                    &lt;br&gt;- Faible &lt;br&gt;- Moyen &lt;br&gt;- Fort
         * @param {string} [identifiant] Identifiant du mouvement
         * @param {string} [latlon] Saisir un point sous la forme longitude / latitude. Le séparateur de décimales est toujours un point. La paire de coordonnées est separée par une virgule. Exemple : 1.939266,47.861961
         * @param {number} [page] Numéro de la page
         * @param {number} [pageSize] Taille des pages
         * @param {number} [rayon] Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à 10 000 mètres. Par defaut le rayon de recherche est fixé a 1000 mètres.
         * @param {string} [region] Le code de la région recherchée
         * @param {string} [type] Type de mouvement de terrain                   &lt;br&gt;- Effondrement / Affaissement &lt;br&gt;- Coulée &lt;br&gt;- Glissement &lt;br&gt;- Erosion de berges &lt;br&gt;- Chute de blocs / Eboulement
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rechercheRisquesUsingGET3(codeInsee?: string, departement?: string, fiabilite?: string, identifiant?: string, latlon?: string, page?: number, pageSize?: number, rayon?: number, region?: string, type?: string, options?: any): AxiosPromise<PaginatedResponseMvt> {
            return localVarFp.rechercheRisquesUsingGET3(codeInsee, departement, fiabilite, identifiant, latlon, page, pageSize, rayon, region, type, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MVTApi - object-oriented interface
 * @export
 * @class MVTApi
 * @extends {BaseAPI}
 */
export class MVTApi extends BaseAPI {
    /**
     * Cette interface est conçue pour diffuser les données sur le mouvement de terrain.
     * @summary Cette interface est conçue pour diffuser les données sur le mouvement de terrain.
     * @param {string} [codeInsee] Code(s) INSEE de la commune. Si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee&#x3D;45234,45100. Le nombre maximum de codes est 10. Ce type de recherche ne peut pas être combiné avec une recherche au rayon.
     * @param {string} [departement] Le code du département recherché
     * @param {string} [fiabilite] Type de fiabilité                                    &lt;br&gt;- Faible &lt;br&gt;- Moyen &lt;br&gt;- Fort
     * @param {string} [identifiant] Identifiant du mouvement
     * @param {string} [latlon] Saisir un point sous la forme longitude / latitude. Le séparateur de décimales est toujours un point. La paire de coordonnées est separée par une virgule. Exemple : 1.939266,47.861961
     * @param {number} [page] Numéro de la page
     * @param {number} [pageSize] Taille des pages
     * @param {number} [rayon] Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à 10 000 mètres. Par defaut le rayon de recherche est fixé a 1000 mètres.
     * @param {string} [region] Le code de la région recherchée
     * @param {string} [type] Type de mouvement de terrain                   &lt;br&gt;- Effondrement / Affaissement &lt;br&gt;- Coulée &lt;br&gt;- Glissement &lt;br&gt;- Erosion de berges &lt;br&gt;- Chute de blocs / Eboulement
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MVTApi
     */
    public rechercheRisquesUsingGET3(codeInsee?: string, departement?: string, fiabilite?: string, identifiant?: string, latlon?: string, page?: number, pageSize?: number, rayon?: number, region?: string, type?: string, options?: AxiosRequestConfig) {
        return MVTApiFp(this.configuration).rechercheRisquesUsingGET3(codeInsee, departement, fiabilite, identifiant, latlon, page, pageSize, rayon, region, type, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PAPIApi - axios parameter creator
 * @export
 */
export const PAPIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Ce service permet de lister les Programmes d\'Actions de Prévention des Inondations (PAPI) recensés sur le territoire concerné, suivant une emprise spatiale définie, à  savoir un rayon de recherche pour un point défini, une ou plusieurs communes.
         * @summary Lister les Programmes d\'Actions de Prévention des Inondations (PAPI) recensés sur le territoire concerné
         * @param {string} [codeInsee] Code(s) INSEE de la commune, si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee&#x3D;45234,45100, le nombre maximum de code est 10. Ce type de recherche ne peut pas être combinée avec une recherche au rayon.
         * @param {string} [latlon] Saisir un point sous la forme longitude / latitude. Le séparateur de décimales est toujours le point. La paire de coordonnées est séparée par une virgule. exemple : 2.29253,48.92572
         * @param {number} [page] Numéro de la page
         * @param {number} [pageSize] Taille des pages
         * @param {number} [rayon] Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à  10 000 mètres. Par défaut le rayon de recherche est fixé à  1000 mètres.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rechercheRisquesUsingGET4: async (codeInsee?: string, latlon?: string, page?: number, pageSize?: number, rayon?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/gaspar/papi`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (codeInsee !== undefined) {
                localVarQueryParameter['code_insee'] = codeInsee;
            }

            if (latlon !== undefined) {
                localVarQueryParameter['latlon'] = latlon;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (rayon !== undefined) {
                localVarQueryParameter['rayon'] = rayon;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PAPIApi - functional programming interface
 * @export
 */
export const PAPIApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PAPIApiAxiosParamCreator(configuration)
    return {
        /**
         * Ce service permet de lister les Programmes d\'Actions de Prévention des Inondations (PAPI) recensés sur le territoire concerné, suivant une emprise spatiale définie, à  savoir un rayon de recherche pour un point défini, une ou plusieurs communes.
         * @summary Lister les Programmes d\'Actions de Prévention des Inondations (PAPI) recensés sur le territoire concerné
         * @param {string} [codeInsee] Code(s) INSEE de la commune, si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee&#x3D;45234,45100, le nombre maximum de code est 10. Ce type de recherche ne peut pas être combinée avec une recherche au rayon.
         * @param {string} [latlon] Saisir un point sous la forme longitude / latitude. Le séparateur de décimales est toujours le point. La paire de coordonnées est séparée par une virgule. exemple : 2.29253,48.92572
         * @param {number} [page] Numéro de la page
         * @param {number} [pageSize] Taille des pages
         * @param {number} [rayon] Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à  10 000 mètres. Par défaut le rayon de recherche est fixé à  1000 mètres.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rechercheRisquesUsingGET4(codeInsee?: string, latlon?: string, page?: number, pageSize?: number, rayon?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResponsePapi>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rechercheRisquesUsingGET4(codeInsee, latlon, page, pageSize, rayon, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PAPIApi - factory interface
 * @export
 */
export const PAPIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PAPIApiFp(configuration)
    return {
        /**
         * Ce service permet de lister les Programmes d\'Actions de Prévention des Inondations (PAPI) recensés sur le territoire concerné, suivant une emprise spatiale définie, à  savoir un rayon de recherche pour un point défini, une ou plusieurs communes.
         * @summary Lister les Programmes d\'Actions de Prévention des Inondations (PAPI) recensés sur le territoire concerné
         * @param {string} [codeInsee] Code(s) INSEE de la commune, si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee&#x3D;45234,45100, le nombre maximum de code est 10. Ce type de recherche ne peut pas être combinée avec une recherche au rayon.
         * @param {string} [latlon] Saisir un point sous la forme longitude / latitude. Le séparateur de décimales est toujours le point. La paire de coordonnées est séparée par une virgule. exemple : 2.29253,48.92572
         * @param {number} [page] Numéro de la page
         * @param {number} [pageSize] Taille des pages
         * @param {number} [rayon] Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à  10 000 mètres. Par défaut le rayon de recherche est fixé à  1000 mètres.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rechercheRisquesUsingGET4(codeInsee?: string, latlon?: string, page?: number, pageSize?: number, rayon?: number, options?: any): AxiosPromise<PaginatedResponsePapi> {
            return localVarFp.rechercheRisquesUsingGET4(codeInsee, latlon, page, pageSize, rayon, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PAPIApi - object-oriented interface
 * @export
 * @class PAPIApi
 * @extends {BaseAPI}
 */
export class PAPIApi extends BaseAPI {
    /**
     * Ce service permet de lister les Programmes d\'Actions de Prévention des Inondations (PAPI) recensés sur le territoire concerné, suivant une emprise spatiale définie, à  savoir un rayon de recherche pour un point défini, une ou plusieurs communes.
     * @summary Lister les Programmes d\'Actions de Prévention des Inondations (PAPI) recensés sur le territoire concerné
     * @param {string} [codeInsee] Code(s) INSEE de la commune, si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee&#x3D;45234,45100, le nombre maximum de code est 10. Ce type de recherche ne peut pas être combinée avec une recherche au rayon.
     * @param {string} [latlon] Saisir un point sous la forme longitude / latitude. Le séparateur de décimales est toujours le point. La paire de coordonnées est séparée par une virgule. exemple : 2.29253,48.92572
     * @param {number} [page] Numéro de la page
     * @param {number} [pageSize] Taille des pages
     * @param {number} [rayon] Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à  10 000 mètres. Par défaut le rayon de recherche est fixé à  1000 mètres.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PAPIApi
     */
    public rechercheRisquesUsingGET4(codeInsee?: string, latlon?: string, page?: number, pageSize?: number, rayon?: number, options?: AxiosRequestConfig) {
        return PAPIApiFp(this.configuration).rechercheRisquesUsingGET4(codeInsee, latlon, page, pageSize, rayon, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PCSApi - axios parameter creator
 * @export
 */
export const PCSApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Ce service permet de lister les Plans Communaux de Sauvegarde (PCS) recensés sur le territoire concerné, suivant une emprise spatiale définie, à  savoir un rayon de recherche pour un point défini, une ou plusieurs communes.
         * @summary Lister les Plans Communaux de Sauvegarde (PCS) recensés sur le territoire concerné
         * @param {string} [codeInsee] Code(s) INSEE de la commune, si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee&#x3D;45234,45100, le nombre maximum de code est 10. Ce type de recherche ne peut pas être combinée avec une recherche au rayon.
         * @param {string} [latlon] Saisir un point sous la forme longitude / latitude. Le séparateur de décimales est toujours le point. La paire de coordonnées est séparée par une virgule. exemple : 2.29253,48.92572
         * @param {number} [page] Numéro de la page
         * @param {number} [pageSize] Taille des pages
         * @param {number} [rayon] Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à  10 000 mètres. Par défaut le rayon de recherche est fixé à  1000 mètres.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rechercheRisquesUsingGET5: async (codeInsee?: string, latlon?: string, page?: number, pageSize?: number, rayon?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/gaspar/pcs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (codeInsee !== undefined) {
                localVarQueryParameter['code_insee'] = codeInsee;
            }

            if (latlon !== undefined) {
                localVarQueryParameter['latlon'] = latlon;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (rayon !== undefined) {
                localVarQueryParameter['rayon'] = rayon;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PCSApi - functional programming interface
 * @export
 */
export const PCSApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PCSApiAxiosParamCreator(configuration)
    return {
        /**
         * Ce service permet de lister les Plans Communaux de Sauvegarde (PCS) recensés sur le territoire concerné, suivant une emprise spatiale définie, à  savoir un rayon de recherche pour un point défini, une ou plusieurs communes.
         * @summary Lister les Plans Communaux de Sauvegarde (PCS) recensés sur le territoire concerné
         * @param {string} [codeInsee] Code(s) INSEE de la commune, si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee&#x3D;45234,45100, le nombre maximum de code est 10. Ce type de recherche ne peut pas être combinée avec une recherche au rayon.
         * @param {string} [latlon] Saisir un point sous la forme longitude / latitude. Le séparateur de décimales est toujours le point. La paire de coordonnées est séparée par une virgule. exemple : 2.29253,48.92572
         * @param {number} [page] Numéro de la page
         * @param {number} [pageSize] Taille des pages
         * @param {number} [rayon] Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à  10 000 mètres. Par défaut le rayon de recherche est fixé à  1000 mètres.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rechercheRisquesUsingGET5(codeInsee?: string, latlon?: string, page?: number, pageSize?: number, rayon?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResponsePcs>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rechercheRisquesUsingGET5(codeInsee, latlon, page, pageSize, rayon, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PCSApi - factory interface
 * @export
 */
export const PCSApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PCSApiFp(configuration)
    return {
        /**
         * Ce service permet de lister les Plans Communaux de Sauvegarde (PCS) recensés sur le territoire concerné, suivant une emprise spatiale définie, à  savoir un rayon de recherche pour un point défini, une ou plusieurs communes.
         * @summary Lister les Plans Communaux de Sauvegarde (PCS) recensés sur le territoire concerné
         * @param {string} [codeInsee] Code(s) INSEE de la commune, si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee&#x3D;45234,45100, le nombre maximum de code est 10. Ce type de recherche ne peut pas être combinée avec une recherche au rayon.
         * @param {string} [latlon] Saisir un point sous la forme longitude / latitude. Le séparateur de décimales est toujours le point. La paire de coordonnées est séparée par une virgule. exemple : 2.29253,48.92572
         * @param {number} [page] Numéro de la page
         * @param {number} [pageSize] Taille des pages
         * @param {number} [rayon] Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à  10 000 mètres. Par défaut le rayon de recherche est fixé à  1000 mètres.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rechercheRisquesUsingGET5(codeInsee?: string, latlon?: string, page?: number, pageSize?: number, rayon?: number, options?: any): AxiosPromise<PaginatedResponsePcs> {
            return localVarFp.rechercheRisquesUsingGET5(codeInsee, latlon, page, pageSize, rayon, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PCSApi - object-oriented interface
 * @export
 * @class PCSApi
 * @extends {BaseAPI}
 */
export class PCSApi extends BaseAPI {
    /**
     * Ce service permet de lister les Plans Communaux de Sauvegarde (PCS) recensés sur le territoire concerné, suivant une emprise spatiale définie, à  savoir un rayon de recherche pour un point défini, une ou plusieurs communes.
     * @summary Lister les Plans Communaux de Sauvegarde (PCS) recensés sur le territoire concerné
     * @param {string} [codeInsee] Code(s) INSEE de la commune, si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee&#x3D;45234,45100, le nombre maximum de code est 10. Ce type de recherche ne peut pas être combinée avec une recherche au rayon.
     * @param {string} [latlon] Saisir un point sous la forme longitude / latitude. Le séparateur de décimales est toujours le point. La paire de coordonnées est séparée par une virgule. exemple : 2.29253,48.92572
     * @param {number} [page] Numéro de la page
     * @param {number} [pageSize] Taille des pages
     * @param {number} [rayon] Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à  10 000 mètres. Par défaut le rayon de recherche est fixé à  1000 mètres.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PCSApi
     */
    public rechercheRisquesUsingGET5(codeInsee?: string, latlon?: string, page?: number, pageSize?: number, rayon?: number, options?: AxiosRequestConfig) {
        return PCSApiFp(this.configuration).rechercheRisquesUsingGET5(codeInsee, latlon, page, pageSize, rayon, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PPRApi - axios parameter creator
 * @export
 */
export const PPRApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Ce service permet de lister les différents documents PPR, suivant une emprise spatiale définie, à  savoir un rayon de recherche pour un point défini, une ou plusieurs communes.
         * @summary Lister les documents PPR
         * @param {string} [codeEtat] Ce paramètre est optionnel. Code de l\&#39;état du document PPR, qui prend pour valeur 01 (Prescrit), 02 (Approuvé), 03 (Abrogé), 04 (Appliqué par anticipation). Si plusieurs états, séparer les codes par une virgule. exemple : 01,02,03,04
         * @param {string} [codeInsee] Code(s) INSEE de la commune, si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee&#x3D;45234,45100, le nombre maximum de code est 10. Ce type de recherche ne peut pas être combinée avec une recherche au rayon.
         * @param {string} [codeRisque] Ce paramètre est optionnel. Code du type de risque du document PPR, qui prend pour valeur pour les principaux :11 (Inondation), 12 (Mouvements de terrain), 13 (Séisme), 14 (Avalanche), 16 (Feu de forêt), 17 (Phénomènes météorologiques), 21 (Risque industriel). Si plusieurs types de risque, séparer les codes par une virgule. exemple : 11,12,13
         * @param {string} [latlon] Saisir un point sous la forme longitude / latitude. Le séparateur de décimales est toujours le point. La paire de coordonnées est séparée par une virgule. exemple : 2.29253,48.92572
         * @param {number} [page] Numéro de la page
         * @param {number} [pageSize] Taille des pages
         * @param {number} [rayon] Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à  10 000 mètres. Par défaut le rayon de recherche est fixé à  1000 mètres.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recherchePPRUsingGET: async (codeEtat?: string, codeInsee?: string, codeRisque?: string, latlon?: string, page?: number, pageSize?: number, rayon?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/ppr`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (codeEtat !== undefined) {
                localVarQueryParameter['code_etat'] = codeEtat;
            }

            if (codeInsee !== undefined) {
                localVarQueryParameter['code_insee'] = codeInsee;
            }

            if (codeRisque !== undefined) {
                localVarQueryParameter['code_risque'] = codeRisque;
            }

            if (latlon !== undefined) {
                localVarQueryParameter['latlon'] = latlon;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (rayon !== undefined) {
                localVarQueryParameter['rayon'] = rayon;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PPRApi - functional programming interface
 * @export
 */
export const PPRApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PPRApiAxiosParamCreator(configuration)
    return {
        /**
         * Ce service permet de lister les différents documents PPR, suivant une emprise spatiale définie, à  savoir un rayon de recherche pour un point défini, une ou plusieurs communes.
         * @summary Lister les documents PPR
         * @param {string} [codeEtat] Ce paramètre est optionnel. Code de l\&#39;état du document PPR, qui prend pour valeur 01 (Prescrit), 02 (Approuvé), 03 (Abrogé), 04 (Appliqué par anticipation). Si plusieurs états, séparer les codes par une virgule. exemple : 01,02,03,04
         * @param {string} [codeInsee] Code(s) INSEE de la commune, si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee&#x3D;45234,45100, le nombre maximum de code est 10. Ce type de recherche ne peut pas être combinée avec une recherche au rayon.
         * @param {string} [codeRisque] Ce paramètre est optionnel. Code du type de risque du document PPR, qui prend pour valeur pour les principaux :11 (Inondation), 12 (Mouvements de terrain), 13 (Séisme), 14 (Avalanche), 16 (Feu de forêt), 17 (Phénomènes météorologiques), 21 (Risque industriel). Si plusieurs types de risque, séparer les codes par une virgule. exemple : 11,12,13
         * @param {string} [latlon] Saisir un point sous la forme longitude / latitude. Le séparateur de décimales est toujours le point. La paire de coordonnées est séparée par une virgule. exemple : 2.29253,48.92572
         * @param {number} [page] Numéro de la page
         * @param {number} [pageSize] Taille des pages
         * @param {number} [rayon] Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à  10 000 mètres. Par défaut le rayon de recherche est fixé à  1000 mètres.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recherchePPRUsingGET(codeEtat?: string, codeInsee?: string, codeRisque?: string, latlon?: string, page?: number, pageSize?: number, rayon?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResponsePPR>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.recherchePPRUsingGET(codeEtat, codeInsee, codeRisque, latlon, page, pageSize, rayon, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PPRApi - factory interface
 * @export
 */
export const PPRApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PPRApiFp(configuration)
    return {
        /**
         * Ce service permet de lister les différents documents PPR, suivant une emprise spatiale définie, à  savoir un rayon de recherche pour un point défini, une ou plusieurs communes.
         * @summary Lister les documents PPR
         * @param {string} [codeEtat] Ce paramètre est optionnel. Code de l\&#39;état du document PPR, qui prend pour valeur 01 (Prescrit), 02 (Approuvé), 03 (Abrogé), 04 (Appliqué par anticipation). Si plusieurs états, séparer les codes par une virgule. exemple : 01,02,03,04
         * @param {string} [codeInsee] Code(s) INSEE de la commune, si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee&#x3D;45234,45100, le nombre maximum de code est 10. Ce type de recherche ne peut pas être combinée avec une recherche au rayon.
         * @param {string} [codeRisque] Ce paramètre est optionnel. Code du type de risque du document PPR, qui prend pour valeur pour les principaux :11 (Inondation), 12 (Mouvements de terrain), 13 (Séisme), 14 (Avalanche), 16 (Feu de forêt), 17 (Phénomènes météorologiques), 21 (Risque industriel). Si plusieurs types de risque, séparer les codes par une virgule. exemple : 11,12,13
         * @param {string} [latlon] Saisir un point sous la forme longitude / latitude. Le séparateur de décimales est toujours le point. La paire de coordonnées est séparée par une virgule. exemple : 2.29253,48.92572
         * @param {number} [page] Numéro de la page
         * @param {number} [pageSize] Taille des pages
         * @param {number} [rayon] Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à  10 000 mètres. Par défaut le rayon de recherche est fixé à  1000 mètres.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recherchePPRUsingGET(codeEtat?: string, codeInsee?: string, codeRisque?: string, latlon?: string, page?: number, pageSize?: number, rayon?: number, options?: any): AxiosPromise<PaginatedResponsePPR> {
            return localVarFp.recherchePPRUsingGET(codeEtat, codeInsee, codeRisque, latlon, page, pageSize, rayon, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PPRApi - object-oriented interface
 * @export
 * @class PPRApi
 * @extends {BaseAPI}
 */
export class PPRApi extends BaseAPI {
    /**
     * Ce service permet de lister les différents documents PPR, suivant une emprise spatiale définie, à  savoir un rayon de recherche pour un point défini, une ou plusieurs communes.
     * @summary Lister les documents PPR
     * @param {string} [codeEtat] Ce paramètre est optionnel. Code de l\&#39;état du document PPR, qui prend pour valeur 01 (Prescrit), 02 (Approuvé), 03 (Abrogé), 04 (Appliqué par anticipation). Si plusieurs états, séparer les codes par une virgule. exemple : 01,02,03,04
     * @param {string} [codeInsee] Code(s) INSEE de la commune, si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee&#x3D;45234,45100, le nombre maximum de code est 10. Ce type de recherche ne peut pas être combinée avec une recherche au rayon.
     * @param {string} [codeRisque] Ce paramètre est optionnel. Code du type de risque du document PPR, qui prend pour valeur pour les principaux :11 (Inondation), 12 (Mouvements de terrain), 13 (Séisme), 14 (Avalanche), 16 (Feu de forêt), 17 (Phénomènes météorologiques), 21 (Risque industriel). Si plusieurs types de risque, séparer les codes par une virgule. exemple : 11,12,13
     * @param {string} [latlon] Saisir un point sous la forme longitude / latitude. Le séparateur de décimales est toujours le point. La paire de coordonnées est séparée par une virgule. exemple : 2.29253,48.92572
     * @param {number} [page] Numéro de la page
     * @param {number} [pageSize] Taille des pages
     * @param {number} [rayon] Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à  10 000 mètres. Par défaut le rayon de recherche est fixé à  1000 mètres.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PPRApi
     */
    public recherchePPRUsingGET(codeEtat?: string, codeInsee?: string, codeRisque?: string, latlon?: string, page?: number, pageSize?: number, rayon?: number, options?: AxiosRequestConfig) {
        return PPRApiFp(this.configuration).recherchePPRUsingGET(codeEtat, codeInsee, codeRisque, latlon, page, pageSize, rayon, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RadonApi - axios parameter creator
 * @export
 */
export const RadonApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Ce service permet de recherche le potentiel radon d\'une ou plusieurs communes. Attention pour les communes de Paris, Lyon et Marseille, seules les informations à  l\'arrondissement sont disponibles.
         * @summary Rechercher les potentiels radon des communes
         * @param {string} codeInsee Code(s) INSEE de la commune, si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee&#x3D;45234,45100, le nombre maximum de code est 10
         * @param {number} [page] Numéro de la page
         * @param {number} [pageSize] Taille des pages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rechercheRadonUsingGET: async (codeInsee: string, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'codeInsee' is not null or undefined
            assertParamExists('rechercheRadonUsingGET', 'codeInsee', codeInsee)
            const localVarPath = `/api/v1/radon`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (codeInsee !== undefined) {
                localVarQueryParameter['code_insee'] = codeInsee;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RadonApi - functional programming interface
 * @export
 */
export const RadonApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RadonApiAxiosParamCreator(configuration)
    return {
        /**
         * Ce service permet de recherche le potentiel radon d\'une ou plusieurs communes. Attention pour les communes de Paris, Lyon et Marseille, seules les informations à  l\'arrondissement sont disponibles.
         * @summary Rechercher les potentiels radon des communes
         * @param {string} codeInsee Code(s) INSEE de la commune, si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee&#x3D;45234,45100, le nombre maximum de code est 10
         * @param {number} [page] Numéro de la page
         * @param {number} [pageSize] Taille des pages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rechercheRadonUsingGET(codeInsee: string, page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResponseRadon>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rechercheRadonUsingGET(codeInsee, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RadonApi - factory interface
 * @export
 */
export const RadonApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RadonApiFp(configuration)
    return {
        /**
         * Ce service permet de recherche le potentiel radon d\'une ou plusieurs communes. Attention pour les communes de Paris, Lyon et Marseille, seules les informations à  l\'arrondissement sont disponibles.
         * @summary Rechercher les potentiels radon des communes
         * @param {string} codeInsee Code(s) INSEE de la commune, si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee&#x3D;45234,45100, le nombre maximum de code est 10
         * @param {number} [page] Numéro de la page
         * @param {number} [pageSize] Taille des pages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rechercheRadonUsingGET(codeInsee: string, page?: number, pageSize?: number, options?: any): AxiosPromise<PaginatedResponseRadon> {
            return localVarFp.rechercheRadonUsingGET(codeInsee, page, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RadonApi - object-oriented interface
 * @export
 * @class RadonApi
 * @extends {BaseAPI}
 */
export class RadonApi extends BaseAPI {
    /**
     * Ce service permet de recherche le potentiel radon d\'une ou plusieurs communes. Attention pour les communes de Paris, Lyon et Marseille, seules les informations à  l\'arrondissement sont disponibles.
     * @summary Rechercher les potentiels radon des communes
     * @param {string} codeInsee Code(s) INSEE de la commune, si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee&#x3D;45234,45100, le nombre maximum de code est 10
     * @param {number} [page] Numéro de la page
     * @param {number} [pageSize] Taille des pages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RadonApi
     */
    public rechercheRadonUsingGET(codeInsee: string, page?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return RadonApiFp(this.configuration).rechercheRadonUsingGET(codeInsee, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RapportPDFApi - axios parameter creator
 * @export
 */
export const RapportPDFApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Cette interface est conçue pour generer un rapport de risque
         * @summary VERSION BETA - Cette interface est conçue pour generer un rapport de risque
         * @param {string} [adresse] 
         * @param {string} [codeInsee] 
         * @param {string} [latlon] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateRapportRisqueUsingGET: async (adresse?: string, codeInsee?: string, latlon?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/rapport_pdf`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (adresse !== undefined) {
                localVarQueryParameter['adresse'] = adresse;
            }

            if (codeInsee !== undefined) {
                localVarQueryParameter['codeInsee'] = codeInsee;
            }

            if (latlon !== undefined) {
                localVarQueryParameter['latlon'] = latlon;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RapportPDFApi - functional programming interface
 * @export
 */
export const RapportPDFApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RapportPDFApiAxiosParamCreator(configuration)
    return {
        /**
         * Cette interface est conçue pour generer un rapport de risque
         * @summary VERSION BETA - Cette interface est conçue pour generer un rapport de risque
         * @param {string} [adresse] 
         * @param {string} [codeInsee] 
         * @param {string} [latlon] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateRapportRisqueUsingGET(adresse?: string, codeInsee?: string, latlon?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateRapportRisqueUsingGET(adresse, codeInsee, latlon, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RapportPDFApi - factory interface
 * @export
 */
export const RapportPDFApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RapportPDFApiFp(configuration)
    return {
        /**
         * Cette interface est conçue pour generer un rapport de risque
         * @summary VERSION BETA - Cette interface est conçue pour generer un rapport de risque
         * @param {string} [adresse] 
         * @param {string} [codeInsee] 
         * @param {string} [latlon] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateRapportRisqueUsingGET(adresse?: string, codeInsee?: string, latlon?: string, options?: any): AxiosPromise<string> {
            return localVarFp.generateRapportRisqueUsingGET(adresse, codeInsee, latlon, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RapportPDFApi - object-oriented interface
 * @export
 * @class RapportPDFApi
 * @extends {BaseAPI}
 */
export class RapportPDFApi extends BaseAPI {
    /**
     * Cette interface est conçue pour generer un rapport de risque
     * @summary VERSION BETA - Cette interface est conçue pour generer un rapport de risque
     * @param {string} [adresse] 
     * @param {string} [codeInsee] 
     * @param {string} [latlon] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RapportPDFApi
     */
    public generateRapportRisqueUsingGET(adresse?: string, codeInsee?: string, latlon?: string, options?: AxiosRequestConfig) {
        return RapportPDFApiFp(this.configuration).generateRapportRisqueUsingGET(adresse, codeInsee, latlon, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RetraitGonflementDesArgilesApi - axios parameter creator
 * @export
 */
export const RetraitGonflementDesArgilesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Cette interface est conçue pour diffuser les données sur le retrait / gonflement des sols argileux.
         * @summary Cette interface est conçue pour diffuser les données sur le retrait / gonflement des sols argileux.
         * @param {string} [latlon] Saisir un point sous la forme longitude / latitude. Le séparateur de décimales est toujours un point. La paire de coordonnées est separée par une virgule. Exemple : 0.345234,46.576964
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rechercherZonageRetraitGonflementUsingGET: async (latlon?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/rga`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (latlon !== undefined) {
                localVarQueryParameter['latlon'] = latlon;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RetraitGonflementDesArgilesApi - functional programming interface
 * @export
 */
export const RetraitGonflementDesArgilesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RetraitGonflementDesArgilesApiAxiosParamCreator(configuration)
    return {
        /**
         * Cette interface est conçue pour diffuser les données sur le retrait / gonflement des sols argileux.
         * @summary Cette interface est conçue pour diffuser les données sur le retrait / gonflement des sols argileux.
         * @param {string} [latlon] Saisir un point sous la forme longitude / latitude. Le séparateur de décimales est toujours un point. La paire de coordonnées est separée par une virgule. Exemple : 0.345234,46.576964
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rechercherZonageRetraitGonflementUsingGET(latlon?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ZonageArgile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rechercherZonageRetraitGonflementUsingGET(latlon, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RetraitGonflementDesArgilesApi - factory interface
 * @export
 */
export const RetraitGonflementDesArgilesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RetraitGonflementDesArgilesApiFp(configuration)
    return {
        /**
         * Cette interface est conçue pour diffuser les données sur le retrait / gonflement des sols argileux.
         * @summary Cette interface est conçue pour diffuser les données sur le retrait / gonflement des sols argileux.
         * @param {string} [latlon] Saisir un point sous la forme longitude / latitude. Le séparateur de décimales est toujours un point. La paire de coordonnées est separée par une virgule. Exemple : 0.345234,46.576964
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rechercherZonageRetraitGonflementUsingGET(latlon?: string, options?: any): AxiosPromise<ZonageArgile> {
            return localVarFp.rechercherZonageRetraitGonflementUsingGET(latlon, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RetraitGonflementDesArgilesApi - object-oriented interface
 * @export
 * @class RetraitGonflementDesArgilesApi
 * @extends {BaseAPI}
 */
export class RetraitGonflementDesArgilesApi extends BaseAPI {
    /**
     * Cette interface est conçue pour diffuser les données sur le retrait / gonflement des sols argileux.
     * @summary Cette interface est conçue pour diffuser les données sur le retrait / gonflement des sols argileux.
     * @param {string} [latlon] Saisir un point sous la forme longitude / latitude. Le séparateur de décimales est toujours un point. La paire de coordonnées est separée par une virgule. Exemple : 0.345234,46.576964
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetraitGonflementDesArgilesApi
     */
    public rechercherZonageRetraitGonflementUsingGET(latlon?: string, options?: AxiosRequestConfig) {
        return RetraitGonflementDesArgilesApiFp(this.configuration).rechercherZonageRetraitGonflementUsingGET(latlon, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RisquesApi - axios parameter creator
 * @export
 */
export const RisquesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Ce service permet de lister les types de risques recensés sur le territoire concerné, suivant une emprise spatiale définie, à  savoir un rayon de recherche pour un point défini, une ou plusieurs communes.
         * @summary Lister les types de risques recensés sur le territoire concerné
         * @param {string} [codeInsee] Code(s) INSEE de la commune, si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee&#x3D;45234,45100, le nombre maximum de code est 10. Ce type de recherche ne peut pas être combinée avec une recherche au rayon.
         * @param {string} [latlon] Saisir un point sous la forme longitude / latitude. Le séparateur de décimales est toujours le point. La paire de coordonnées est séparée par une virgule. exemple : 2.29253,48.92572
         * @param {number} [page] Numéro de la page
         * @param {number} [pageSize] Taille des pages
         * @param {number} [rayon] Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à  10 000 mètres. Par défaut le rayon de recherche est fixé à  1000 mètres.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rechercheRisquesUsingGET6: async (codeInsee?: string, latlon?: string, page?: number, pageSize?: number, rayon?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/gaspar/risques`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (codeInsee !== undefined) {
                localVarQueryParameter['code_insee'] = codeInsee;
            }

            if (latlon !== undefined) {
                localVarQueryParameter['latlon'] = latlon;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (rayon !== undefined) {
                localVarQueryParameter['rayon'] = rayon;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RisquesApi - functional programming interface
 * @export
 */
export const RisquesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RisquesApiAxiosParamCreator(configuration)
    return {
        /**
         * Ce service permet de lister les types de risques recensés sur le territoire concerné, suivant une emprise spatiale définie, à  savoir un rayon de recherche pour un point défini, une ou plusieurs communes.
         * @summary Lister les types de risques recensés sur le territoire concerné
         * @param {string} [codeInsee] Code(s) INSEE de la commune, si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee&#x3D;45234,45100, le nombre maximum de code est 10. Ce type de recherche ne peut pas être combinée avec une recherche au rayon.
         * @param {string} [latlon] Saisir un point sous la forme longitude / latitude. Le séparateur de décimales est toujours le point. La paire de coordonnées est séparée par une virgule. exemple : 2.29253,48.92572
         * @param {number} [page] Numéro de la page
         * @param {number} [pageSize] Taille des pages
         * @param {number} [rayon] Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à  10 000 mètres. Par défaut le rayon de recherche est fixé à  1000 mètres.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rechercheRisquesUsingGET6(codeInsee?: string, latlon?: string, page?: number, pageSize?: number, rayon?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResponseRisques>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rechercheRisquesUsingGET6(codeInsee, latlon, page, pageSize, rayon, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RisquesApi - factory interface
 * @export
 */
export const RisquesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RisquesApiFp(configuration)
    return {
        /**
         * Ce service permet de lister les types de risques recensés sur le territoire concerné, suivant une emprise spatiale définie, à  savoir un rayon de recherche pour un point défini, une ou plusieurs communes.
         * @summary Lister les types de risques recensés sur le territoire concerné
         * @param {string} [codeInsee] Code(s) INSEE de la commune, si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee&#x3D;45234,45100, le nombre maximum de code est 10. Ce type de recherche ne peut pas être combinée avec une recherche au rayon.
         * @param {string} [latlon] Saisir un point sous la forme longitude / latitude. Le séparateur de décimales est toujours le point. La paire de coordonnées est séparée par une virgule. exemple : 2.29253,48.92572
         * @param {number} [page] Numéro de la page
         * @param {number} [pageSize] Taille des pages
         * @param {number} [rayon] Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à  10 000 mètres. Par défaut le rayon de recherche est fixé à  1000 mètres.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rechercheRisquesUsingGET6(codeInsee?: string, latlon?: string, page?: number, pageSize?: number, rayon?: number, options?: any): AxiosPromise<PaginatedResponseRisques> {
            return localVarFp.rechercheRisquesUsingGET6(codeInsee, latlon, page, pageSize, rayon, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RisquesApi - object-oriented interface
 * @export
 * @class RisquesApi
 * @extends {BaseAPI}
 */
export class RisquesApi extends BaseAPI {
    /**
     * Ce service permet de lister les types de risques recensés sur le territoire concerné, suivant une emprise spatiale définie, à  savoir un rayon de recherche pour un point défini, une ou plusieurs communes.
     * @summary Lister les types de risques recensés sur le territoire concerné
     * @param {string} [codeInsee] Code(s) INSEE de la commune, si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee&#x3D;45234,45100, le nombre maximum de code est 10. Ce type de recherche ne peut pas être combinée avec une recherche au rayon.
     * @param {string} [latlon] Saisir un point sous la forme longitude / latitude. Le séparateur de décimales est toujours le point. La paire de coordonnées est séparée par une virgule. exemple : 2.29253,48.92572
     * @param {number} [page] Numéro de la page
     * @param {number} [pageSize] Taille des pages
     * @param {number} [rayon] Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à  10 000 mètres. Par défaut le rayon de recherche est fixé à  1000 mètres.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RisquesApi
     */
    public rechercheRisquesUsingGET6(codeInsee?: string, latlon?: string, page?: number, pageSize?: number, rayon?: number, options?: AxiosRequestConfig) {
        return RisquesApiFp(this.configuration).rechercheRisquesUsingGET6(codeInsee, latlon, page, pageSize, rayon, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SISApi - axios parameter creator
 * @export
 */
export const SISApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Ce service permet de lister les différents SIS, suivant une emprise spatiale définie, à  savoir un rayon de recherche pour un point défini, une ou plusieurs communes.   
         * @summary Lister les Secteurs d\'Information sur les Sols
         * @param {string} [codeInsee] Code(s) INSEE de la commune, si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee&#x3D;45234,45100, le nombre maximum de code est 10. Ce type de recherche ne peut pas être combinée avec une recherche au rayon.
         * @param {string} [latlon] Saisir un point sous la forme longitude / latitude. Le séparateur de décimales est toujours le point. La paire de coordonnées est séparée par une virgule. exemple : 2.29253,48.92572
         * @param {number} [page] Numéro de la page
         * @param {number} [pageSize] Taille des pages
         * @param {number} [rayon] Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à  10 000 mètres. Par défaut le rayon de recherche est fixé à  1000 mètres.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rechercheSISUsingGET: async (codeInsee?: string, latlon?: string, page?: number, pageSize?: number, rayon?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/sis`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (codeInsee !== undefined) {
                localVarQueryParameter['code_insee'] = codeInsee;
            }

            if (latlon !== undefined) {
                localVarQueryParameter['latlon'] = latlon;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (rayon !== undefined) {
                localVarQueryParameter['rayon'] = rayon;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SISApi - functional programming interface
 * @export
 */
export const SISApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SISApiAxiosParamCreator(configuration)
    return {
        /**
         * Ce service permet de lister les différents SIS, suivant une emprise spatiale définie, à  savoir un rayon de recherche pour un point défini, une ou plusieurs communes.   
         * @summary Lister les Secteurs d\'Information sur les Sols
         * @param {string} [codeInsee] Code(s) INSEE de la commune, si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee&#x3D;45234,45100, le nombre maximum de code est 10. Ce type de recherche ne peut pas être combinée avec une recherche au rayon.
         * @param {string} [latlon] Saisir un point sous la forme longitude / latitude. Le séparateur de décimales est toujours le point. La paire de coordonnées est séparée par une virgule. exemple : 2.29253,48.92572
         * @param {number} [page] Numéro de la page
         * @param {number} [pageSize] Taille des pages
         * @param {number} [rayon] Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à  10 000 mètres. Par défaut le rayon de recherche est fixé à  1000 mètres.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rechercheSISUsingGET(codeInsee?: string, latlon?: string, page?: number, pageSize?: number, rayon?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResponseSIS>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rechercheSISUsingGET(codeInsee, latlon, page, pageSize, rayon, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SISApi - factory interface
 * @export
 */
export const SISApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SISApiFp(configuration)
    return {
        /**
         * Ce service permet de lister les différents SIS, suivant une emprise spatiale définie, à  savoir un rayon de recherche pour un point défini, une ou plusieurs communes.   
         * @summary Lister les Secteurs d\'Information sur les Sols
         * @param {string} [codeInsee] Code(s) INSEE de la commune, si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee&#x3D;45234,45100, le nombre maximum de code est 10. Ce type de recherche ne peut pas être combinée avec une recherche au rayon.
         * @param {string} [latlon] Saisir un point sous la forme longitude / latitude. Le séparateur de décimales est toujours le point. La paire de coordonnées est séparée par une virgule. exemple : 2.29253,48.92572
         * @param {number} [page] Numéro de la page
         * @param {number} [pageSize] Taille des pages
         * @param {number} [rayon] Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à  10 000 mètres. Par défaut le rayon de recherche est fixé à  1000 mètres.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rechercheSISUsingGET(codeInsee?: string, latlon?: string, page?: number, pageSize?: number, rayon?: number, options?: any): AxiosPromise<PaginatedResponseSIS> {
            return localVarFp.rechercheSISUsingGET(codeInsee, latlon, page, pageSize, rayon, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SISApi - object-oriented interface
 * @export
 * @class SISApi
 * @extends {BaseAPI}
 */
export class SISApi extends BaseAPI {
    /**
     * Ce service permet de lister les différents SIS, suivant une emprise spatiale définie, à  savoir un rayon de recherche pour un point défini, une ou plusieurs communes.   
     * @summary Lister les Secteurs d\'Information sur les Sols
     * @param {string} [codeInsee] Code(s) INSEE de la commune, si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee&#x3D;45234,45100, le nombre maximum de code est 10. Ce type de recherche ne peut pas être combinée avec une recherche au rayon.
     * @param {string} [latlon] Saisir un point sous la forme longitude / latitude. Le séparateur de décimales est toujours le point. La paire de coordonnées est séparée par une virgule. exemple : 2.29253,48.92572
     * @param {number} [page] Numéro de la page
     * @param {number} [pageSize] Taille des pages
     * @param {number} [rayon] Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à  10 000 mètres. Par défaut le rayon de recherche est fixé à  1000 mètres.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SISApi
     */
    public rechercheSISUsingGET(codeInsee?: string, latlon?: string, page?: number, pageSize?: number, rayon?: number, options?: AxiosRequestConfig) {
        return SISApiFp(this.configuration).rechercheSISUsingGET(codeInsee, latlon, page, pageSize, rayon, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TIMApi - axios parameter creator
 * @export
 */
export const TIMApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Ce service permet de lister les dossier de Transmission d\'Information au Maire (TIM) recensés sur le territoire concerné, suivant une emprise spatiale définie, à  savoir un rayon de recherche pour un point défini, une ou plusieurs communes.
         * @summary Lister les dossier de Transmission d\'Information au Maire (TIM) recensés sur le territoire concerné
         * @param {string} [codeInsee] Code(s) INSEE de la commune, si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee&#x3D;45234,45100, le nombre maximum de code est 10. Ce type de recherche ne peut pas être combinée avec une recherche au rayon.
         * @param {string} [latlon] Saisir un point sous la forme longitude / latitude. Le séparateur de décimales est toujours le point. La paire de coordonnées est séparée par une virgule. exemple : 2.29253,48.92572
         * @param {number} [page] Numéro de la page
         * @param {number} [pageSize] Taille des pages
         * @param {number} [rayon] Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à  10 000 mètres. Par défaut le rayon de recherche est fixé à  1000 mètres.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rechercheRisquesUsingGET7: async (codeInsee?: string, latlon?: string, page?: number, pageSize?: number, rayon?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/gaspar/tim`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (codeInsee !== undefined) {
                localVarQueryParameter['code_insee'] = codeInsee;
            }

            if (latlon !== undefined) {
                localVarQueryParameter['latlon'] = latlon;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (rayon !== undefined) {
                localVarQueryParameter['rayon'] = rayon;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TIMApi - functional programming interface
 * @export
 */
export const TIMApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TIMApiAxiosParamCreator(configuration)
    return {
        /**
         * Ce service permet de lister les dossier de Transmission d\'Information au Maire (TIM) recensés sur le territoire concerné, suivant une emprise spatiale définie, à  savoir un rayon de recherche pour un point défini, une ou plusieurs communes.
         * @summary Lister les dossier de Transmission d\'Information au Maire (TIM) recensés sur le territoire concerné
         * @param {string} [codeInsee] Code(s) INSEE de la commune, si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee&#x3D;45234,45100, le nombre maximum de code est 10. Ce type de recherche ne peut pas être combinée avec une recherche au rayon.
         * @param {string} [latlon] Saisir un point sous la forme longitude / latitude. Le séparateur de décimales est toujours le point. La paire de coordonnées est séparée par une virgule. exemple : 2.29253,48.92572
         * @param {number} [page] Numéro de la page
         * @param {number} [pageSize] Taille des pages
         * @param {number} [rayon] Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à  10 000 mètres. Par défaut le rayon de recherche est fixé à  1000 mètres.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rechercheRisquesUsingGET7(codeInsee?: string, latlon?: string, page?: number, pageSize?: number, rayon?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResponseTim>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rechercheRisquesUsingGET7(codeInsee, latlon, page, pageSize, rayon, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TIMApi - factory interface
 * @export
 */
export const TIMApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TIMApiFp(configuration)
    return {
        /**
         * Ce service permet de lister les dossier de Transmission d\'Information au Maire (TIM) recensés sur le territoire concerné, suivant une emprise spatiale définie, à  savoir un rayon de recherche pour un point défini, une ou plusieurs communes.
         * @summary Lister les dossier de Transmission d\'Information au Maire (TIM) recensés sur le territoire concerné
         * @param {string} [codeInsee] Code(s) INSEE de la commune, si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee&#x3D;45234,45100, le nombre maximum de code est 10. Ce type de recherche ne peut pas être combinée avec une recherche au rayon.
         * @param {string} [latlon] Saisir un point sous la forme longitude / latitude. Le séparateur de décimales est toujours le point. La paire de coordonnées est séparée par une virgule. exemple : 2.29253,48.92572
         * @param {number} [page] Numéro de la page
         * @param {number} [pageSize] Taille des pages
         * @param {number} [rayon] Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à  10 000 mètres. Par défaut le rayon de recherche est fixé à  1000 mètres.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rechercheRisquesUsingGET7(codeInsee?: string, latlon?: string, page?: number, pageSize?: number, rayon?: number, options?: any): AxiosPromise<PaginatedResponseTim> {
            return localVarFp.rechercheRisquesUsingGET7(codeInsee, latlon, page, pageSize, rayon, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TIMApi - object-oriented interface
 * @export
 * @class TIMApi
 * @extends {BaseAPI}
 */
export class TIMApi extends BaseAPI {
    /**
     * Ce service permet de lister les dossier de Transmission d\'Information au Maire (TIM) recensés sur le territoire concerné, suivant une emprise spatiale définie, à  savoir un rayon de recherche pour un point défini, une ou plusieurs communes.
     * @summary Lister les dossier de Transmission d\'Information au Maire (TIM) recensés sur le territoire concerné
     * @param {string} [codeInsee] Code(s) INSEE de la commune, si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee&#x3D;45234,45100, le nombre maximum de code est 10. Ce type de recherche ne peut pas être combinée avec une recherche au rayon.
     * @param {string} [latlon] Saisir un point sous la forme longitude / latitude. Le séparateur de décimales est toujours le point. La paire de coordonnées est séparée par une virgule. exemple : 2.29253,48.92572
     * @param {number} [page] Numéro de la page
     * @param {number} [pageSize] Taille des pages
     * @param {number} [rayon] Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à  10 000 mètres. Par défaut le rayon de recherche est fixé à  1000 mètres.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TIMApi
     */
    public rechercheRisquesUsingGET7(codeInsee?: string, latlon?: string, page?: number, pageSize?: number, rayon?: number, options?: AxiosRequestConfig) {
        return TIMApiFp(this.configuration).rechercheRisquesUsingGET7(codeInsee, latlon, page, pageSize, rayon, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TRIApi - axios parameter creator
 * @export
 */
export const TRIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Ce service permet de lister les Territoires à  Risques importants d\'Inondation (TRI) recensés sur le territoire concerné, suivant une emprise spatiale définie, à  savoir un rayon de recherche pour un point défini, une ou plusieurs communes.
         * @summary Lister les Territoires à  Risques importants d\'Inondation (TRI) recensés sur le territoire concerné
         * @param {string} [codeInsee] Code(s) INSEE de la commune, si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee&#x3D;45234,45100, le nombre maximum de code est 10. Ce type de recherche ne peut pas être combinée avec une recherche au rayon.
         * @param {string} [latlon] Saisir un point sous la forme longitude / latitude. Le séparateur de décimales est toujours le point. La paire de coordonnées est séparée par une virgule. exemple : 2.29253,48.92572
         * @param {number} [page] Numéro de la page
         * @param {number} [pageSize] Taille des pages
         * @param {number} [rayon] Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à  10 000 mètres. Par défaut le rayon de recherche est fixé à  1000 mètres.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rechercheRisquesUsingGET8: async (codeInsee?: string, latlon?: string, page?: number, pageSize?: number, rayon?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/gaspar/tri`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (codeInsee !== undefined) {
                localVarQueryParameter['code_insee'] = codeInsee;
            }

            if (latlon !== undefined) {
                localVarQueryParameter['latlon'] = latlon;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (rayon !== undefined) {
                localVarQueryParameter['rayon'] = rayon;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TRIApi - functional programming interface
 * @export
 */
export const TRIApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TRIApiAxiosParamCreator(configuration)
    return {
        /**
         * Ce service permet de lister les Territoires à  Risques importants d\'Inondation (TRI) recensés sur le territoire concerné, suivant une emprise spatiale définie, à  savoir un rayon de recherche pour un point défini, une ou plusieurs communes.
         * @summary Lister les Territoires à  Risques importants d\'Inondation (TRI) recensés sur le territoire concerné
         * @param {string} [codeInsee] Code(s) INSEE de la commune, si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee&#x3D;45234,45100, le nombre maximum de code est 10. Ce type de recherche ne peut pas être combinée avec une recherche au rayon.
         * @param {string} [latlon] Saisir un point sous la forme longitude / latitude. Le séparateur de décimales est toujours le point. La paire de coordonnées est séparée par une virgule. exemple : 2.29253,48.92572
         * @param {number} [page] Numéro de la page
         * @param {number} [pageSize] Taille des pages
         * @param {number} [rayon] Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à  10 000 mètres. Par défaut le rayon de recherche est fixé à  1000 mètres.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rechercheRisquesUsingGET8(codeInsee?: string, latlon?: string, page?: number, pageSize?: number, rayon?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResponseTri>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rechercheRisquesUsingGET8(codeInsee, latlon, page, pageSize, rayon, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TRIApi - factory interface
 * @export
 */
export const TRIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TRIApiFp(configuration)
    return {
        /**
         * Ce service permet de lister les Territoires à  Risques importants d\'Inondation (TRI) recensés sur le territoire concerné, suivant une emprise spatiale définie, à  savoir un rayon de recherche pour un point défini, une ou plusieurs communes.
         * @summary Lister les Territoires à  Risques importants d\'Inondation (TRI) recensés sur le territoire concerné
         * @param {string} [codeInsee] Code(s) INSEE de la commune, si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee&#x3D;45234,45100, le nombre maximum de code est 10. Ce type de recherche ne peut pas être combinée avec une recherche au rayon.
         * @param {string} [latlon] Saisir un point sous la forme longitude / latitude. Le séparateur de décimales est toujours le point. La paire de coordonnées est séparée par une virgule. exemple : 2.29253,48.92572
         * @param {number} [page] Numéro de la page
         * @param {number} [pageSize] Taille des pages
         * @param {number} [rayon] Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à  10 000 mètres. Par défaut le rayon de recherche est fixé à  1000 mètres.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rechercheRisquesUsingGET8(codeInsee?: string, latlon?: string, page?: number, pageSize?: number, rayon?: number, options?: any): AxiosPromise<PaginatedResponseTri> {
            return localVarFp.rechercheRisquesUsingGET8(codeInsee, latlon, page, pageSize, rayon, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TRIApi - object-oriented interface
 * @export
 * @class TRIApi
 * @extends {BaseAPI}
 */
export class TRIApi extends BaseAPI {
    /**
     * Ce service permet de lister les Territoires à  Risques importants d\'Inondation (TRI) recensés sur le territoire concerné, suivant une emprise spatiale définie, à  savoir un rayon de recherche pour un point défini, une ou plusieurs communes.
     * @summary Lister les Territoires à  Risques importants d\'Inondation (TRI) recensés sur le territoire concerné
     * @param {string} [codeInsee] Code(s) INSEE de la commune, si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee&#x3D;45234,45100, le nombre maximum de code est 10. Ce type de recherche ne peut pas être combinée avec une recherche au rayon.
     * @param {string} [latlon] Saisir un point sous la forme longitude / latitude. Le séparateur de décimales est toujours le point. La paire de coordonnées est séparée par une virgule. exemple : 2.29253,48.92572
     * @param {number} [page] Numéro de la page
     * @param {number} [pageSize] Taille des pages
     * @param {number} [rayon] Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à  10 000 mètres. Par défaut le rayon de recherche est fixé à  1000 mètres.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TRIApi
     */
    public rechercheRisquesUsingGET8(codeInsee?: string, latlon?: string, page?: number, pageSize?: number, rayon?: number, options?: AxiosRequestConfig) {
        return TRIApiFp(this.configuration).rechercheRisquesUsingGET8(codeInsee, latlon, page, pageSize, rayon, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ZonageSismiqueApi - axios parameter creator
 * @export
 */
export const ZonageSismiqueApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Ce service permet de lister le zonage sismique, suivant une emprise spatiale définie, à  savoir un rayon de recherche pour un point défini, une ou plusieurs communes.
         * @summary Lister les zonages sismiques
         * @param {string} [codeInsee] Code(s) INSEE de la commune, si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee&#x3D;45234,45100, le nombre maximum de code est 10. Ce type de recherche ne peut pas être combinée avec une recherche au rayon.
         * @param {string} [latlon] Saisir un point sous la forme longitude / latitude. Le séparateur de décimales est toujours le point. La paire de coordonnées est séparée par une virgule. exemple : 2.29253,48.92572
         * @param {number} [page] Numéro de la page
         * @param {number} [pageSize] Taille des pages
         * @param {number} [rayon] Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à  10 000 mètres. Par défaut le rayon de recherche est fixé à  1000 mètres.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rechercheRadonUsingGET1: async (codeInsee?: string, latlon?: string, page?: number, pageSize?: number, rayon?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/zonage_sismique`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (codeInsee !== undefined) {
                localVarQueryParameter['code_insee'] = codeInsee;
            }

            if (latlon !== undefined) {
                localVarQueryParameter['latlon'] = latlon;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (rayon !== undefined) {
                localVarQueryParameter['rayon'] = rayon;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ZonageSismiqueApi - functional programming interface
 * @export
 */
export const ZonageSismiqueApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ZonageSismiqueApiAxiosParamCreator(configuration)
    return {
        /**
         * Ce service permet de lister le zonage sismique, suivant une emprise spatiale définie, à  savoir un rayon de recherche pour un point défini, une ou plusieurs communes.
         * @summary Lister les zonages sismiques
         * @param {string} [codeInsee] Code(s) INSEE de la commune, si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee&#x3D;45234,45100, le nombre maximum de code est 10. Ce type de recherche ne peut pas être combinée avec une recherche au rayon.
         * @param {string} [latlon] Saisir un point sous la forme longitude / latitude. Le séparateur de décimales est toujours le point. La paire de coordonnées est séparée par une virgule. exemple : 2.29253,48.92572
         * @param {number} [page] Numéro de la page
         * @param {number} [pageSize] Taille des pages
         * @param {number} [rayon] Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à  10 000 mètres. Par défaut le rayon de recherche est fixé à  1000 mètres.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rechercheRadonUsingGET1(codeInsee?: string, latlon?: string, page?: number, pageSize?: number, rayon?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResponseZonageSismique>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rechercheRadonUsingGET1(codeInsee, latlon, page, pageSize, rayon, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ZonageSismiqueApi - factory interface
 * @export
 */
export const ZonageSismiqueApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ZonageSismiqueApiFp(configuration)
    return {
        /**
         * Ce service permet de lister le zonage sismique, suivant une emprise spatiale définie, à  savoir un rayon de recherche pour un point défini, une ou plusieurs communes.
         * @summary Lister les zonages sismiques
         * @param {string} [codeInsee] Code(s) INSEE de la commune, si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee&#x3D;45234,45100, le nombre maximum de code est 10. Ce type de recherche ne peut pas être combinée avec une recherche au rayon.
         * @param {string} [latlon] Saisir un point sous la forme longitude / latitude. Le séparateur de décimales est toujours le point. La paire de coordonnées est séparée par une virgule. exemple : 2.29253,48.92572
         * @param {number} [page] Numéro de la page
         * @param {number} [pageSize] Taille des pages
         * @param {number} [rayon] Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à  10 000 mètres. Par défaut le rayon de recherche est fixé à  1000 mètres.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rechercheRadonUsingGET1(codeInsee?: string, latlon?: string, page?: number, pageSize?: number, rayon?: number, options?: any): AxiosPromise<PaginatedResponseZonageSismique> {
            return localVarFp.rechercheRadonUsingGET1(codeInsee, latlon, page, pageSize, rayon, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ZonageSismiqueApi - object-oriented interface
 * @export
 * @class ZonageSismiqueApi
 * @extends {BaseAPI}
 */
export class ZonageSismiqueApi extends BaseAPI {
    /**
     * Ce service permet de lister le zonage sismique, suivant une emprise spatiale définie, à  savoir un rayon de recherche pour un point défini, une ou plusieurs communes.
     * @summary Lister les zonages sismiques
     * @param {string} [codeInsee] Code(s) INSEE de la commune, si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee&#x3D;45234,45100, le nombre maximum de code est 10. Ce type de recherche ne peut pas être combinée avec une recherche au rayon.
     * @param {string} [latlon] Saisir un point sous la forme longitude / latitude. Le séparateur de décimales est toujours le point. La paire de coordonnées est séparée par une virgule. exemple : 2.29253,48.92572
     * @param {number} [page] Numéro de la page
     * @param {number} [pageSize] Taille des pages
     * @param {number} [rayon] Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à  10 000 mètres. Par défaut le rayon de recherche est fixé à  1000 mètres.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZonageSismiqueApi
     */
    public rechercheRadonUsingGET1(codeInsee?: string, latlon?: string, page?: number, pageSize?: number, rayon?: number, options?: AxiosRequestConfig) {
        return ZonageSismiqueApiFp(this.configuration).rechercheRadonUsingGET1(codeInsee, latlon, page, pageSize, rayon, options).then((request) => request(this.axios, this.basePath));
    }
}



